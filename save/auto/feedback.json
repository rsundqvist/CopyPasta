[
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\nSteg3:\n\n:::::: CrystalModel: %FILE:CrystalModel.java%\n\n:::::: CrystalView: %FILE:CrystalView.java%\n\n:::::: CrystalControl: %FILE:CrystalControl.java%\n\n:::::: FeedbackTab:  %FILE:FeedbackTab.java%\nAt L29:  \n= IndexOutOfBoundsException förhindras  if-satser (i >= 0 && i < a.length). De ska i princip aldrig fångas.\n\n\n:::::: FeedbackTab:  %FILE:FileTab.java%\n\nHälsningar,\n%TEACHER%\n\n%FILE:unkown.java%\nAt L16:  \n- Ni har inte gjort någon tar-boll eller gjort en felaktig tar-boll \ndvs inte lämnat in på korrekt sätt.\n\n\n%FILE:u2.java%\nAt L3:  \n- Ni har inte gjort någon tar-boll eller gjort en felaktig tar-boll \ndvs inte lämnat in på korrekt sätt.\n\nAt L14:  \n- Ni har inte gjort någon tar-boll eller gjort en felaktig tar-boll \ndvs inte lämnat in på korrekt sätt.\n\nAt L7:  \n- Ni har inte gjort någon tar-boll eller gjort en felaktig tar-boll \ndvs inte lämnat in på korrekt sätt.\n\n\n%FILE:u1.java%\nAt L6:  \n- Ni har inte gjort någon tar-boll eller gjort en felaktig tar-boll \ndvs inte lämnat in på korrekt sätt.\n",
    "header": "Kommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla markeringar skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n",
    "teacher": "Richard Sundqvist",
    "group": "11",
    "assignment": "kristallbildning",
    "files": {
      "FileTab.java": "package gui.feedback;\n\nimport javafx.scene.control.Tab;\nimport org.fxmisc.richtext.CodeArea;\nimport org.fxmisc.richtext.LineNumberFactory;\nimport org.fxmisc.richtext.model.StyleSpans;\nimport org.fxmisc.richtext.model.StyleSpansBuilder;\nimport org.fxmisc.richtext.model.TwoDimensional;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by Richard Sundqvist on 12/04/2017.\n */\npublic class FileTab extends Tab {\n\n    //region strings\n    private static final String[] KEYWORDS = new String[] {\n            \"abstract\", \"assert\", \"boolean\", \"break\", \"byte\",\n            \"case\", \"catch\", \"char\", \"class\", \"const\",\n            \"continue\", \"default\", \"do\", \"double\", \"else\",\n            \"enum\", \"extends\", \"final\", \"finally\", \"float\",\n            \"for\", \"goto\", \"if\", \"implements\", \"import\",\n            \"instanceof\", \"int\", \"interface\", \"long\", \"native\",\n            \"new\", \"package\", \"private\", \"protected\", \"public\",\n            \"return\", \"short\", \"static\", \"strictfp\", \"super\",\n            \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\",\n            \"transient\", \"try\", \"void\", \"volatile\", \"while\"\n    };\n\n    private static final String KEYWORD_PATTERN = \"\\\\b(\" + String.join(\"|\", KEYWORDS) + \")\\\\b\";\n    private static final String PAREN_PATTERN = \"\\\\(|\\\\)\";\n    private static final String BRACE_PATTERN = \"\\\\{|\\\\}\";\n    private static final String BRACKET_PATTERN = \"\\\\[|\\\\]\";\n    private static final String SEMICOLON_PATTERN = \"\\\\;\";\n    private static final String STRING_PATTERN = \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\";\n    private static final String COMMENT_PATTERN = \"//[^\\n]*\" + \"|\" + \"/\\\\*(.|\\\\R)*?\\\\*/\";\n\n    private static final Pattern PATTERN = Pattern.compile(\n            \"(?<KEYWORD>\" + KEYWORD_PATTERN + \")\"\n                    + \"|(?<PAREN>\" + PAREN_PATTERN + \")\"\n                    + \"|(?<BRACE>\" + BRACE_PATTERN + \")\"\n                    + \"|(?<BRACKET>\" + BRACKET_PATTERN + \")\"\n                    + \"|(?<SEMICOLON>\" + SEMICOLON_PATTERN + \")\"\n                    + \"|(?<STRING>\" + STRING_PATTERN + \")\"\n                    + \"|(?<COMMENT>\" + COMMENT_PATTERN + \")\"\n    );\n    //endregion\n\n    private final CodeArea codeArea;\n    private final int firstLineNumber; //Set to 1 to set the first line to 1.\n\n    public FileTab(String fileName, String content) {\n        this(fileName, content, false);\n    }\n    /**\n     *\n     * @param fileName Name of the file.\n     * @param content Content of the file\n     * @param startFromZero If {@code true}, row count begins at zero.\n     */\n    public FileTab(String fileName, String content, boolean startFromZero) {\n        firstLineNumber = startFromZero ? 0 : 1;\n\n        setText(fileName);\n        setClosable(false);\n\n        codeArea = new CodeArea();\n        codeArea.setParagraphGraphicFactory(LineNumberFactory.get(codeArea));\n\n        codeArea.richChanges()\n                .filter(ch -> !ch.getInserted().equals(ch.getRemoved()))\n                .subscribe(change -> {\n                    codeArea.setStyleSpans(0, computeHighlighting(codeArea.getText()));\n                });\n        codeArea.replaceText(0, 0, content);\n        setContent(codeArea);\n    }\n\n    public String getFileName(){\n        return getText();\n    }\n\n    public int getCaretLine(){\n        int offset = codeArea.getCaretPosition();\n        TwoDimensional.Position pos = codeArea.offsetToPosition(offset, TwoDimensional.Bias.Forward);\n        return pos.getMajor() + firstLineNumber;\n    }\n\n    // @formatter:off\n    private static StyleSpans<Collection<String>> computeHighlighting(String text) {\n        Matcher matcher = PATTERN.matcher(text);\n        int lastKwEnd = 0;\n        StyleSpansBuilder<Collection<String>> spansBuilder\n                = new StyleSpansBuilder<>();\n        while(matcher.find()) {\n            String styleClass =\n                    matcher.group(\"KEYWORD\") != null ? \"keyword\" :\n                    matcher.group(\"PAREN\") != null ? \"paren\" :\n                    matcher.group(\"BRACE\") != null ? \"brace\" :\n                    matcher.group(\"BRACKET\") != null ? \"bracket\" :\n                    matcher.group(\"SEMICOLON\") != null ? \"semicolon\" :\n                    matcher.group(\"STRING\") != null ? \"string\" :\n                    matcher.group(\"COMMENT\") != null ? \"comment\" :\n                    null; /* never happens */ assert styleClass != null;\n            spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);\n            spansBuilder.add(Collections.singleton(styleClass), matcher.end() - matcher.start());\n            lastKwEnd = matcher.end();\n        }\n        spansBuilder.add(Collections.emptyList(), text.length() - lastKwEnd);\n        return spansBuilder.create();\n    }\n    // @formatter:on\n}\n",
      "FeedbackTab.java": "package gui.feedback;\n\nimport javafx.scene.control.Tab;\nimport javafx.scene.control.TabPane;\nimport javafx.scene.control.TextArea;\nimport model.Feedback;\n\n/**\n * Created by Richard Sundqvist on 19/02/2017.\n */\npublic class FeedbackTab extends Tab {\n    public static final int MIN_TITLE_LENGTH = 4;\n\n    private final Feedback feedback;\n    private final TextArea textArea;\n\n    public FeedbackTab (Feedback feedback) {\n        this.feedback = feedback;\n        textArea = new TextArea();\n        textArea.setText(feedback.getContent());\n        textArea.textProperty().addListener(event -> updateFeedback());\n\n        TabPane tabPane = new TabPane();\n\n        Tab feedbackTab = new Tab(\"Student Feedback\");\n        feedbackTab.setContent(textArea);\n        feedbackTab.setClosable(false);\n        Tab filesTab = new Tab(\"Student Files\");\n        filesTab.setContent(new StudentFileViewer());\n        filesTab.setClosable(false);\n\n        tabPane.getTabs().addAll(feedbackTab, filesTab);\n\n        setContent(tabPane);\n        setClosable(true);\n        updateTitle();\n    }\n\n    private void updateFeedback () {\n        feedback.setContent(textArea.getText()); //TODO Too many calls?\n    }\n\n    public Feedback getFeedback () {\n        feedback.setContent(textArea.getText());\n        return feedback;\n    }\n\n    public String toString () {\n        return getText();\n    }\n\n\n    public void setTitle (String title) {\n        if (title == null || title.equals(\"\")) {\n            title = \"<Unknown group>\";\n        }\n        if (title.length() < MIN_TITLE_LENGTH) {\n            StringBuilder sb = new StringBuilder(title);\n            while (sb.length() <= MIN_TITLE_LENGTH) {\n                sb.append(\" \");\n            }\n            title = sb.toString();\n        }\n        setText(title);\n    }\n\n    public void updateTitle () {\n        setTitle(feedback.getGroup() + (feedback.isDone() ? \" \\u2713\" : \"\"));\n    }\n}\n",
      "u2.java": "foo foo foo\nfoo foo foo\nfoo foo foo\n\nfoo foo foo\nfoo foo foo\nfoo foo foo\n\nfoo foo foo\nfoo foo foo\nfoo foo foo\n\nfoo foo foo\nfoo foo foo\nfoo foo foo\n",
      "u1.java": "bar bar bar\nbar bar bar\nbar bar bar\n\nbar bar bar\nbar bar bar\nbar bar bar\n\nbar bar bar\nbar bar bar\nbar bar bar\n\nbar bar bar\nbar bar bar\nbar bar bar\n"
    },
    "done": false
  },
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\nSteg3:\n\n:::::: CrystalModel: %FILE:CrystalModel.java%\n\n:::::: CrystalView: %FILE:CrystalView.java%\n\n:::::: CrystalControl: %FILE:CrystalControl.java%\n\n:::::: FeedbackTab:  %FILE:FeedbackTab.java%\n\n:::::: FeedbackTab:  %FILE:FileTab.java%\n\nHälsningar,\n%TEACHER%",
    "header": "Kommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla markeringar skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n",
    "teacher": "Richard Sundqvist",
    "group": "137",
    "assignment": "kristallbildning",
    "files": {},
    "done": false
  }
]