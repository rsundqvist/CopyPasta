[
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\n:::::: Steg3: %FILE: Steg3.java% //Default, recommended\n\n:::::: CrystalModel: %File: CrystalModel.java \t% //Acceptable variant\n\n:::::: CrystalView: %file: \tCrystalView.java  \t% //Acceptable variant\n\n:::::: CrystalControl: %  \tFILE:CrystalControl.java  % //Acceptable variant\n\n\nHälsningar,\n%NAME%",
    "header": "",
    "teacher": "",
    "group": "11",
    "assignment": "",
    "files": {
      "comments.txt": "Hej\nKommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nHej\nLab 3 kan ge max 6p.\n\nGrupp: 11, inlämning 2\nPoäng: 3, accepterad\n\nBra, här är mina kommentar(er):\n\nallmänt: \nBra jobbat!\n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\n\nRichard Sundqvist\n\n",
      "69.txt": "Kommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nLab 3 kan ge max 6p.\n\nGrupp: 69, inlämning 1\nPoäng: xx, accepterad\n\nBra, här är mina kommentar(er):\n\nAllmänt: \n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\nRichard Sundqvist\n"
    },
    "done": false
  },
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\n:::::: Steg3: %FILE: Steg3.java% //Default, recommended\n\n:::::: CrystalModel: %File: CrystalModel.java \t% //Acceptable variant\n\n:::::: CrystalView: %file: \tCrystalView.java  \t% //Acceptable variant\n\n:::::: CrystalControl: %  \tFILE:CrystalControl.java  % //Acceptable variant\n\n\nHälsningar,\n%NAME%",
    "header": "",
    "teacher": "",
    "group": "137",
    "assignment": "",
    "files": {
      "comments.txt": "Hej\nKommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nHej\nLab 3 kan ge max 6p.\n\nGrupp: 137, inlämning 1\nPoäng: 3, accepterad\n\nBra, här är mina kommentar(er):\n\nallmänt: \n* Ta bort TODO:erna helt och hållet när de är behandlade.\n\n# Indenteringen är inte korrekt. Möjligtvis blandar ni spaces och tabbar. Titta\ngärna på automatisk indentering i IDE:er såsom Eclipse.\n\nSteg3:\n= Det finns ingen anledning att anropa new Steg3() här. Gör Ram2 till en statisk\nklass för att slippa skapa en värdelös Steg3 instans.\n\n= Kontrollera både att args faktiskt innehåller något (args.length > 0)\noch att args[0] är ett tal (try/catch IllegalNumberFormatException).\n\nCrystalControl: \n\nCrystalView:\n= Instansvariabler är ej privata.\n\nCrystalModel:\n= crystallizeOneIon() garanterar inte att en jon faktiskt kristalliseras, vilket\nju gör metodnamnet direkt felaktigt. Ni måste använda dropNewIon() igen i loopen\nom den går utanför flyktcirkeln.\n\nRichard Sundqvist\n\n"
    },
    "done": false
  },
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\n:::::: Steg3: %FILE: Steg3.java% //Default, recommended\n\n:::::: CrystalModel: %File: CrystalModel.java \t% //Acceptable variant\n\n:::::: CrystalView: %file: \tCrystalView.java  \t% //Acceptable variant\n\n:::::: CrystalControl: %  \tFILE:CrystalControl.java  % //Acceptable variant\n\n\nHälsningar,\n%NAME%",
    "header": "",
    "teacher": "",
    "group": "143",
    "assignment": "",
    "files": {
      "comments.txt": "Hej\nKommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nHej\nLab 3 kan ge max 6p.\n\nGrupp: 142, inlämning 2\nPoäng: 3, accepterad\n\nBra, här är mina kommentar(er):\n\nallmänt: \nBra jobbat!\n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\n\nRichard Sundqvist\n\n"
    },
    "done": false
  },
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\n:::::: Steg3: %FILE: Steg3.java% //Default, recommended\n\n:::::: CrystalModel: %File: CrystalModel.java \t% //Acceptable variant\n\n:::::: CrystalView: %file: \tCrystalView.java  \t% //Acceptable variant\n\n:::::: CrystalControl: %  \tFILE:CrystalControl.java  % //Acceptable variant\n\n\nHälsningar,\n%NAME%",
    "header": "",
    "teacher": "",
    "group": "21",
    "assignment": "",
    "files": {
      "comments.txt": "Hej\nKommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nHej\nLab 3 kan ge max 6p.\n\nGrupp: 21, inlämning 1\nPoäng: 0, retur (inom 7 dagar)\n\nBra, här är mina kommentar(er):\n\nallmänt: \n- Kraven under \"Specialla krav\" är krav, inte förslag:\n\"Simuleringen startas med java Steg3 size däre size är bredden och höjden på badet\"\n\nDet är helt OK att ha extra finesser såsom sliders men programmet ska fortfarande\ndelas upp på ett vettigt sätt.\n\nSkapa klasserna i separata filer (undantag t.ex. action listeners, inte relevant\ni ert fall när ni använder lamba notation) och lämna in igen. Hela tanken med\nMVC är just att saker såsom GUI inte ska ligga i modellen.\n\nNi bör (ska) ha separata klasser för Model, View samt Control i egna filer.\n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\n\nRichard Sundqvist\n\n",
      "CrystalModel.java": "// Importing classes\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dialog;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Graphics;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.image.BufferedImage;\nimport java.awt.GraphicsEnvironment;\nimport java.util.Scanner;\nimport java.awt.Robot;\nimport java.io.File;\nimport javax.imageio.ImageIO;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\nimport javax.swing.JButton;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JSlider;\n\n/**\n * A model for simulating ion crystallization\n * \n * @author Blom, Max\n * @author Klyver, Markus\n *\n * GROUP: 21\n */\npublic class CrystalModel {\n\n\t// Variables\n\n\tprivate int size;\n\n\tprivate boolean[][] stateMatrix;\n\n\tprivate int x;\n\tprivate int y;\n\n\tprivate int d;\n\n\tprivate int startRadius;\n\tprivate int escapeCircleRadius;\n\n\t/**\n\t * @param size\n\t *            The size of the window\n\t */\n\tpublic CrystalModel(int size) {\n\t\tthis.size = size;\n\t\tthis.d = (int) (size / 2.0);\n\t\tthis.startRadius = (int) (2.0 / 3.0 * ((double) d));\n\t\tthis.escapeCircleRadius = (int) (8.0 / 9.0 * ((double) d));\n\t\tthis.stateMatrix = new boolean[size][size];\n\t}\n\n\t/**\n\t * JFrame for slider\n\t */\n\tpublic static class CrystalView {\n\t\tprivate JFrame frame = new JFrame(\"Crystal Viewer\");\n\t\tprivate JPanel panel;\n\n\t\tprivate BufferedImage image;\n\n\t\tprivate CrystalModel model;\n\n\t\tprivate ActionListener a;\n\n\t\t// Buttons\n\t\tprivate JButton changeSpeed = new JButton(\"Change Speed\");\n\t\tprivate JButton start = new JButton(\"Start\");\n\t\tprivate JButton stop = new JButton(\"Stop\");\n\n\t\tprivate boolean paused = true;\n\n\t\tprivate int speed = 10;\n\n\t\t// Our JFrame and slider for changing simulation speed\n\t\tprivate JFrame window;\n\t\tprivate JSlider js;\n\n\t\tprivate void changeSpeed() {\n\t\t\tif (window == null || (window != null && !window.isVisible()))\n\t\t\t\twindow = new ChangeSpeed();\n\t\t\telse if (window != null) {\n\t\t\t\twindow.requestFocus();\n\t\t\t\twindow.toFront();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Changes the simulation speed\n\t\t */\n\t\tprivate class ChangeSpeed extends JFrame {\n\t\t\tpublic ChangeSpeed() {\n\t\t\t\tthis.setTitle(\"Change simulation speed\");\n\t\t\t\tthis.setSize(300, 100);\n\t\t\t\tthis.setResizable(false);\n\t\t\t\tthis.setLayout(new BorderLayout());\n\n\t\t\t\tjs = new JSlider(1, 1000);\n\n\t\t\t\tjs.setValue(speed);\n\n\t\t\t\t// Makes the slider nicer to look at\n\t\t\t\tjs.setMinorTickSpacing(5);\n\t\t\t\tjs.setPaintTicks(true);\n\t\t\t\tjs.setPaintLabels(true);\n\n\t\t\t\tthis.add(js, BorderLayout.NORTH);\n\n\t\t\t\t// Buttons\n\t\t\t\tJButton b1 = new JButton(\"Apply\");\n\t\t\t\tJButton b2 = new JButton(\"Cancel\");\n\n\t\t\t\t// Listeners\n\t\t\t\tb1.addActionListener(a);\n\t\t\t\tb2.addActionListener(a);\n\n\t\t\t\tthis.add(b1, BorderLayout.WEST);\n\t\t\t\tthis.add(b2, BorderLayout.EAST);\n\n\t\t\t\tthis.pack();\n\t\t\t\tthis.setVisible(true);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * JFrame for our main window\n\t\t * \n\t\t * @param _model\n\t\t *            A Crystalmodel instance\n\t\t */\n\t\tpublic CrystalView(CrystalModel _model) {\n\t\t\t// JFrame\n\t\t\tframe = new JFrame(\"Crystallization simulator\");\n\t\t\tframe.setTitle(\"Crystallization simulator\");\n\t\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\tframe.setSize(_model.size, _model.size + 100);\n\t\t\tframe.setResizable(false);\n\t\t\tpanel = new View();\n\n\t\t\tpanel.setSize(_model.size, _model.size);\n\t\t\tpanel.setPreferredSize(new Dimension(_model.size, _model.size));\n\n\t\t\tframe.setLayout(new BorderLayout());\n\n\t\t\tframe.add(panel, BorderLayout.NORTH);\n\t\t\tframe.add(changeSpeed, BorderLayout.WEST);\n\t\t\tframe.add(start, BorderLayout.CENTER);\n\t\t\tframe.add(stop, BorderLayout.EAST);\n\n\t\t\t// Our listener\n\t\t\ta = new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\tSystem.out.println(e.getActionCommand());\n\n\t\t\t\t\tswitch (e.getActionCommand()) {\n\t\t\t\t\tcase \"Start\":\n\t\t\t\t\t\tStart();\n\n\t\t\t\t\t\tstart.setText(\"Pause\");\n\n\t\t\t\t\t\tpaused = !paused;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Pause\":\n\t\t\t\t\t\tstart.setText(\"Start\");\n\n\t\t\t\t\t\tpaused = !paused;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Stop\":\n\t\t\t\t\t\tint size = model.size;\n\n\t\t\t\t\t\tmodel.stateMatrix = new boolean[size][size];\n\t\t\t\t\t\tmodel.stateMatrix[model.d][model.d] = true;\n\n\t\t\t\t\t\timage = new BufferedImage(size, size, BufferedImage.TYPE_INT_RGB);\n\n\t\t\t\t\t\tpaused = true;\n\n\t\t\t\t\t\tstart.setText(\"Start\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Change Speed\":\n\t\t\t\t\t\tchangeSpeed();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Apply\":\n\t\t\t\t\t\tspeed = js.getValue();\n\t\t\t\t\t\twindow.dispose();\n\t\t\t\t\t\twindow.setVisible(false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Cancel\":\n\t\t\t\t\t\twindow.dispose();\n\t\t\t\t\t\twindow.setVisible(false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tchangeSpeed.addActionListener(a);\n\t\t\tstart.addActionListener(a);\n\t\t\tstop.addActionListener(a);\n\n\t\t\tframe.pack();\n\n\t\t\tframe.setVisible(true);\n\n\t\t\tthis.model = _model;\n\n\t\t\tmodel.stateMatrix[model.d][model.d] = true;\n\n\t\t\timage = new BufferedImage(model.size, model.size, BufferedImage.TYPE_INT_RGB);\n\t\t}\n\n\t\t/**\n\t\t * Generates the image\n\t\t */\n\t\tprivate void GenerateImage() {\n\t\t\tboolean[][] modelMatrix = model.getModelMatrix();\n\n\t\t\tfor (int x = 0; x < model.size; x++) {\n\t\t\t\tfor (int y = 0; y < model.size; y++) {\n\t\t\t\t\tif (modelMatrix[x][y])\n\t\t\t\t\t\timage.setRGB(x, y, Color.GREEN.getRGB());\n\t\t\t\t\telse\n\t\t\t\t\t\timage.setRGB(x, y, Color.BLACK.getRGB());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate Thread t;\n\n\t\tprivate int iterations = 0;\n\n\t\t/**\n\t\t * Starts the simulation\n\t\t */\n\t\tpublic void Start() {\n\t\t\tt = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile (model.simulating) {\n\t\t\t\t\t\tif (!paused) {\n\t\t\t\t\t\t\tif (!model.crystallizeOneIon()) {\n\t\t\t\t\t\t\t\tpaused = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\titerations++;\n\n\t\t\t\t\t\tif (iterations >= speed) {\n\t\t\t\t\t\t\titerations = 0;\n\n\t\t\t\t\t\t\tGenerateImage();\n\n\t\t\t\t\t\t\tpanel.repaint();\n\t\t\t\t\t\t\tframe.repaint();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tt.start();\n\t\t}\n\n\t\t/**\n\t\t * Draws the generated image\n\t\t */\n\t\tprivate class View extends JPanel {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void paint(Graphics g) {\n\t\t\t\tg.drawImage(image, 0, 0, panel.getWidth(), panel.getHeight(), this);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the circle radius. If an ion is outside the radius, it will be\n\t * dropped again inside the circle\n\t * \n\t * @return The circle radius\n\t */\n\tpublic int getEscapeCircleRadius() {\n\t\treturn escapeCircleRadius;\n\t}\n\n\tpublic boolean getModelValue(int _x, int _y) {\n\t\treturn stateMatrix[_x + d][_y + d];\n\t}\n\n\tpublic boolean[][] getModelMatrix() {\n\t\treturn stateMatrix;\n\t}\n\n\t/**\n\t * Saves the image when the simulation is done in the current folder using\n\t * File.createTempFile();\n\t */\n\tpublic void saveImage() {\n\t\ttry {\n\t\t\tFile f = null;\n\t\t\t// A new file in the current folder\n\t\t\tf = File.createTempFile(\"Crystal\", \".png\", new File(\".\"));\n\n\t\t\tif (f.exists() && !f.isDirectory()) {\n\t\t\t\tf.createNewFile();\n\t\t\t}\n\t\t\tImageIO.write(s.image, \"bmp\", f); // Writes output\n\t\t\tURI path = new URI(f.getAbsolutePath());\n\n\t\t\t// Prints the full path out, normalized\n\t\t\tSystem.out.println(\"Output written to\\n\" + path.normalize());\n\t\t} catch (IOException | URISyntaxException e) {\n\t\t\t// URISyntaxException must be caught, but will never\n\t\t\t// happen\n\t\t\tSystem.exit(1); // Error\n\t\t}\n\n\t}\n\n\tprivate boolean simulating = true;\n\tprivate int iteration = 0;\n\n\t/**\n\t * Checks whether an ion will crystallize or not, based upon certain rules\n\t * \n\t * @return true if the ion will crystallize, otherwise false\n\t */\n\tpublic boolean crystallizeOneIon() {\n\t\twhile (simulating) {\n\t\t\tint direction = (int) (Math.random() * 4);\n\n\t\t\tswitch (direction) {\n\t\t\tcase 0:\n\t\t\t\tx += 1;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\ty += 1;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tx -= 1;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\ty -= 1;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tboolean willCrystallize = false; // Default\n\n\t\t\t// Checks whether it will crystallize or not\n\t\t\tfor (int _x = -1 + x; _x <= 1 + x; _x++) {\n\t\t\t\tfor (int _y = -1 + y; _y <= 1 + y; _y++) {\n\t\t\t\t\tif (_x >= 0 && _x < size && _y >= 0 && _y < size && stateMatrix[_x][_y])\n\t\t\t\t\t\twillCrystallize = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Math.sqrt(s(x - d) + s(y - d)) > escapeCircleRadius) {\n\t\t\t\tcreateNewIon();\n\t\t\t}\n\n\t\t\tif (willCrystallize) {\n\t\t\t\tif (Math.sqrt(s(x - d) + s(y - d)) >= startRadius) {\n\t\t\t\t\tsaveImage();\n\t\t\t\t\t// s.stop.doClick();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tstateMatrix[x][y] = true;\n\t\t\t\tcreateNewIon();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Doubles a number\n\t * \n\t * @param b\n\t *            A real number as a double\n\t * @return Its square number\n\t */\n\tpublic static double s(double b) {\n\t\treturn b * b;\n\t}\n\n\t/**\n\t * Calculates the Euclidean distance between two points from its coordinates\n\t * measured in an orthonormal base\n\t * \n\t * @param a\n\t *            The coordinates of point a\n\t * @param b\n\t *            The coordinates of point b\n\t * @throws Exception\n\t *             If the vectors does not belong to the same vector space\n\t * @return The Euclidean distance between the two points\n\t */\n\tpublic static double dist(double[] a, double[] b) throws Exception {\n\t\tdouble sum = 0;\n\n\t\tif (a.length != b.length)\n\t\t\tthrow new Exception(\"What the hell!?\");\n\t\telse {\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\tsum += s(b[i] - a[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn Math.sqrt(sum);\n\t}\n\n\t/**\n\t * Creates a new ion\n\t */\n\tprivate void createNewIon() {\n\t\tdouble theta = Math.random() * 2 * Math.PI;\n\n\t\tx = (int) (Math.cos(theta) * startRadius) + d;\n\t\ty = (int) (Math.sin(theta) * startRadius) + d;\n\t}\n\n\t/**\n\t * Our toString()-method\n\t */\n\tpublic String toString() {\n\t\tint s1 = getEscapeCircleRadius();\n\n\t\tStringBuffer s = new StringBuffer(10000);\n\n\t\tfor (int i = -s1 - 1; i < s1 + 1; i++) {\n\t\t\ts.append(\"-\");\n\t\t}\n\n\t\ts.append(\"\\n\");\n\n\t\tfor (int i = -s1; i < s1; i++) {\n\t\t\ts.append(\"|\");\n\t\t\tfor (int j = -s1; j < s1; j++) {\n\t\t\t\tif (getModelValue(i, j)) {\n\t\t\t\t\tif (i == x && j == y) {\n\t\t\t\t\t\ts.append(\"#\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts.append(\"*\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ts.append(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\ts.append(\"|\");\n\t\t\ts.append(\"\\n\");\n\t\t}\n\n\t\tfor (int i = -s1 - 1; i < s1 + 1; i++) {\n\t\t\ts.append(\"-\");\n\t\t}\n\n\t\ts.append(\"\\n\");\n\n\t\treturn s.toString();\n\t}\n\n\tpublic static CrystalView s;\n\n\t/**\n\t * Our main program. Does parsing of arguments and exception catching\n\t * \n\t * @param args\n\t *            Arguments from terminal\n\t */\n\tpublic static void main(String[] args) {\n\n\t\tint argsize = 0;\n\t\tdouble scalefactor = 0.8; // Scaling factor\n\n\t\t// Would let the user to specify file path to save the image\n\n\t\t// Making sure the user doesn't mess things up.\n\t\tif (args.length != 1) {\n\t\t\tSystem.out.println (\"Usage: java CrystalModel [crystal bath size]. The size must be larger that 100, but smaller than min(screenWidth, screenHeight); resizing will occur otherwise.\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Making sure the user doesn't mess things up.\n\t\ttry {\n\t\t\targsize = Integer.parseInt(args[0]);\n\t\t} catch (Exception e) {\n\t\t\tSystem.exit(1); // Error\n\t\t}\n\n\t\t// If the height or width are too high, set the window to\n\t\t// scale * max(height, width)\n\t\tint height = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height;\n\t\tint width = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;\n\n\t\t// Making sure the user doesn't mess things up.\n\t\tif (argsize < 200) {\n\t\t\tSystem.out.println (\"Forbidden size; rescaling to 200.\");\n\n\t\t\targsize = 200;\n\t\t}\n\n\t\t// Making sure the user doesn't mess things up.\n\t\tif (width > height && (argsize > height || argsize > width)) {\n\t\t\targsize = (int) (scalefactor * height);\n\n\t\t\tSystem.out.println (\"Forbidden size; rescaling to \" + scalefactor * height + \".\");\n\t\t} else if (argsize > height || argsize > width) {\n\t\t\targsize = (int) (scalefactor * width);\n\n\t\t\tSystem.out.println (\"Forbidden size; rescaling to \" + scalefactor * width + \".\");\n\t\t}\n\n\t\ts = new CrystalView(new CrystalModel(argsize));\n\t}\n}\n"
    },
    "done": false
  },
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\n:::::: Steg3: %FILE: Steg3.java% //Default, recommended\n\n:::::: CrystalModel: %File: CrystalModel.java \t% //Acceptable variant\n\n:::::: CrystalView: %file: \tCrystalView.java  \t% //Acceptable variant\n\n:::::: CrystalControl: %  \tFILE:CrystalControl.java  % //Acceptable variant\n\n\nHälsningar,\n%NAME%",
    "header": "",
    "teacher": "",
    "group": "26",
    "assignment": "",
    "files": {
      "comments.txt": "Hej\nKommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nHej\nLab 3 kan ge max 6p.\n\nGrupp: 26, inlämning 1\nPoäng: 5, accepterad\n\nBra, här är mina kommentar(er):\n\nallmänt: \n\nSteg3:\n= Index out of bounds hanteras med if-satser, inte try/catch.\n\nCrystalControl: \n# \"input\" är inte ett bra namn för hastigheten.\n\nCrystalView:\n\nCrystalModel:\n# L210: Ni använder booleaner konstigt. Kod på formen\n\n    if (a < b) {\n        return true;\n    } else {\n       return false;\n    }\n\t\nKan och bör skrivas\n    return a < b;\n\nRichard Sundqvist\n\n"
    },
    "done": false
  },
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\n:::::: Steg3: %FILE: Steg3.java% //Default, recommended\n\n:::::: CrystalModel: %File: CrystalModel.java \t% //Acceptable variant\n\n:::::: CrystalView: %file: \tCrystalView.java  \t% //Acceptable variant\n\n:::::: CrystalControl: %  \tFILE:CrystalControl.java  % //Acceptable variant\n\n\nHälsningar,\n%NAME%",
    "header": "",
    "teacher": "",
    "group": "67",
    "assignment": "",
    "files": {
      "comments.txt": "Hej\nKommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nHej\nLab 3 kan ge max 6p.\n\nGrupp: 67, inlämning 1\nPoäng: 6, accepterad\n\nBra, här är mina kommentar(er):\n\nallmänt: \nBra jobbat!\n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\n\nRichard Sundqvist\n\n",
      "CrystalModel.java": "/**\n* Purpose: Simulate crystallization of zinc ions in an electrolyte bath  <p>\n* Author: Albin Baeckstrand <p>\n* Group: 67 <p>\n* Assignment: Laboration 3 steg 3, kristallbildning  <p>\n* Last changed: 2017-01-30\n* Notifications: runSomeSteps() method is added and toString() is deleted. Some simple  <p>\n* modifications in getModelValue is made and some methods are changed to public.\n*/\npublic class CrystalModel {\n\n\tprivate int size; // the pixel size of square shaped electrolyte (size*size pixels)\n\tprivate boolean [][] m; // electrolyte crystal matrix\n\tprivate int escapeRadius; // radius of escape circle\n\tprivate int startRadius; // radius of start circle\n\tprivate int x; // x coordinate of ion\n\tprivate int y; // y coordinate of ion\n\n\t/**\n\t* Constructor that creates a crystal model.\n\t* @param size is the number of pixels at one side of the square shaped electrolyte bath.\n\t*/\n\tCrystalModel(int size) {\n\t\tthis.size = size;\n\t\tthis.escapeRadius = size/2-4;\n\t\tthis.startRadius = (int) (escapeRadius*0.90);\n\t}\n\t\n\t/**\n\t* @return the x coordinate of an ion.\n\t*/\n\tpublic int getX() {\n\t\treturn x;\n\t}\n\t\n\t/**\n\t* @return the y coordinate of an ion.\n\t*/\n\tpublic int getY() {\n\t\treturn y;\n\t}\n\t\n\t/**\n\t* Change from local x coordinate (origin in the middle) to <p>\n\t* model x coordinate (origin in the upper left corner).\n\t* @param x is the local x coordinate.\n\t* @return the model x coordinate.\n\t*/\n\tpublic int xBathToModelRep(int x) {\n\t\treturn size/2+x;\n\t}\n\t\n\t/**\n\t* Change from local y coordinate (origin in the middle) to <p>\n\t* model y coordinate (origin in the upper left corner).\n\t* @param y is the local y coordinate.\n\t* @return the model y coordinate.\n\t*/\n\tpublic int yBathToModelRep(int y) {\n\t\treturn size/2+y;\n\t}\n\t\n\t/**\n\t* Creates an empty electrolyte bath with one crystallized ion in the middle.\n\t*/\n\tpublic void reset() {\n\t\tm = new boolean[size][size]; // All values defaults to false\n\t\tm[xBathToModelRep(0)][yBathToModelRep(0)] = true; // Crystal ion in the origin\n\t}\n\t\n\t/**\n\t* Determines if (x,y) is outside a circle with radius r.\n\t* @param r is the radius of a circle.\n\t* @param x is a local x coordinate.\n\t* @param y is a local y coordinate.\n\t* @return true if the point (x,y) is located outside the circle.\n\t*/\n\tprivate boolean outsideCircle(int r, int x, int y) {\n\t\treturn x*x+y*y > r*r; // pythagorean theorem\n\t}\n\t\n\t/**\n\t* Determines if an ion with position (x,y) is next to a crystallized ion <p>\n\t* (up, down, left or right).\n\t* @param x is a local x coordinate of the ion.\n\t* @param y is a local y coordinate of the ion.\n\t* @return true if the ion is next to a crystallized ion.\n\t*/\n\tprivate boolean anyNeighbours(int x, int y) {\n\t\tint X = xBathToModelRep(x);\n\t\tint Y = yBathToModelRep(y); \n\t\treturn m[X-1][Y] || m[X+1][Y] || m[X][Y-1] || m[X][Y+1];\n\t}\n\t\n\t/**\n\t* Determine if its a crystallized ion in point (x,y).\n\t* @param x is a model x coordinate.\n\t* @param y is a model y coordinate.\n\t* @return true if its a crystallized ion in point (x,y)\n\t*/\n\tpublic boolean getModelValue(int x, int y) {\n\t\treturn m[x][y];\n\t}\n\t\n\t/**\n\t* Drops an ion somewhere on the \"start circle\" (randomly).\n\t*/\n\tprivate void dropNewIon() {\n\t\tdouble theta = Math.random()*2*Math.PI; // 0 <= theta < 2*pi\n\t\tif((startRadius*Math.cos(theta))%1 >= 0.5) {\n\t\t\tx = (int) (startRadius*Math.cos(theta)+1);\n\t\t} else {\n\t\t\tx = (int) (startRadius*Math.cos(theta));\n\t\t}\n\t\tif((startRadius*Math.sin(theta))%1 >= 0.5) {\n\t\t\ty = (int) (startRadius*Math.sin(theta)+1);\n\t\t} else {\n\t\t\ty = (int) (startRadius*Math.sin(theta));\n\t\t}\n\t}\n\t\n\t/**\n\t* Crystallize an ion next to an already crystallized ion. The ion moves randomly up, down, <p>\n\t* left or right with the starting point somewhere on the \"start circle\". If the ion moves outside <p>\n\t* the \"escape circle\" another ion is released from the \"start circle\".\n\t* @return false if the ion crystallizes on the \"start circle\" otherwise true.\n\t*/\n\tpublic boolean crystallizeOneIon() {\n\t\tdropNewIon();\n\t\tint randNum; // 0, 1, 2 or 3\n\t\tdo {\n\t\t\tif(outsideCircle(escapeRadius,x,y)) {\n\t\t\t\tdropNewIon();\n\t\t\t}\n\t\t\trandNum = (int) (Math.random()*4);\n\t\t\tif(randNum == 0) {\n\t\t\t\tx = getX()-1; // left\n\t\t\t} else if(randNum == 1) {\n\t\t\t\ty = getY()+1; // up\n\t\t\t} else if(randNum == 2) {\n\t\t\t\tx = getX()+1; // right\n\t\t\t} else {\n\t\t\t\ty = getY()-1; // down\n\t\t\t}\n\t\t\t\n\t\t} while(!anyNeighbours(x,y));\n\t\t\n\t\tm[xBathToModelRep(x)][yBathToModelRep(y)] = true;\n\t\treturn !outsideCircle(startRadius,x,y);\n\t}\n\t\n\t/**\n\t* Add at most steps crystallized ions to the crystal.\n\t* @param steps is the number of crystallized ions added.\n\t* @return true if crystallizeOneIon() is true, i.e. when the last <p>\n\t* ion is crystallized on the \"start circle\".\n\t*/\n\tpublic boolean runSomeSteps(int steps) {\n\t\tint i = 0;\n\t\tboolean goOn = false;\n\t\tdo {\n\t\t\tgoOn = crystallizeOneIon();\n\t\t\ti++;\n\t\t} while (i < steps && goOn);\n\t\treturn goOn;\n\t}\n}\n",
      "CrystalView.java": "import javax.swing.*;\nimport java.awt.*;\n/**\n* Purpose: Creating a crystal view panel of a CrystalModel object. <p>\n* Author: Albin Baeckstrand <p>\n* Group: 67 <p>\n* Assignment: Laboration 3 steg 3, kristallbildning <p>\n* Last changed: 2017-01-30\n*/\npublic class CrystalView extends JPanel {\n\t\n\tprivate CrystalModel cm;\n\t\n\t/**\n\t* Creating a crystal view panel of CrystalModel cm.\n\t* @param cm is the CrystalModel object\n\t*/\n\tpublic CrystalView(CrystalModel cm) {\n\t\tsetBackground(Color.BLACK);\n\t\tthis.cm = cm;\n\t}\n\t\n\t/**\n\t* Paint component of CrystalView.\n\t*/\n\tpublic void paintComponent(Graphics g) {\n\t\tsuper.paintComponent(g);\n\t\t// all crystallized ions are painted as red dots\n\t\tg.setColor(Color.RED);\n\t\tfor(int x = 0; x < getWidth(); x++) {\n\t\t\tfor(int y = 0; y < getHeight(); y++) {\n\t\t\t\tif(cm.getModelValue(x,y)) {\n\t\t\t\t\tg.drawLine(x,y,x,y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// last crystallized ion is painted as a green dot\n\t\tg.setColor(Color.GREEN);\n\t\tint X = cm.xBathToModelRep(cm.getX());\n\t\tint Y = cm.xBathToModelRep(cm.getY());\n\t\tg.drawLine(X,Y,X,Y);\n\t}\n}\n",
      "CrystalControl.java": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n/**\n* Purpose: Creating a control panel with buttons and crystal view panel. <p>\n* Author: Albin Baeckstrand <p>\n* Group: 67 <p>\n* Assignment: Laboration 3 steg 3, kristallbildning <p>\n* Last changed: 2017-01-30\n*/\npublic class CrystalControl extends JPanel{\n\t\n\tprivate CrystalModel cm; // crystal model\n\tprivate CrystalView crystalPanel; // crystal view panel\n\tprivate Timer timer; // timer for the simulation\n\tprivate int speed; // regulates the \"speed\" of simulation (step size)\n\t\n\t/**\n\t* Creating a control panel with buttons and a crystal view panel.\n\t* @param size is width and height of crystal view panel.\n\t*/\n\tpublic CrystalControl(int size) {\n\t\t\n\t\tthis.cm = new CrystalModel(size);\n\t\tcm.reset(); // reset before painting default crystal panel\n\t\t\n\t\tthis.crystalPanel = new CrystalView(cm);\n\t\tcrystalPanel.setPreferredSize(new Dimension(size,size)); // set size*size\n\t\t\n\t\tthis.timer = new Timer(50, new TimerListener()); // delay is 50 ms\n\t\t\n\t\tthis.speed = 20; // default speed (step size)\n\t\t\n\t\t// button options\n\t\tJButton changeSpeedButton = new JButton(\"Change Speed\");\n\t\tchangeSpeedButton.addActionListener(new SpeedButtonListener());\n\t\t\n\t\tJButton runButton = new JButton(\"Run\");\n\t\trunButton.addActionListener(new RunButtonListener());\n\t\t\n\t\tJButton stopButton = new JButton(\"Stop\");\n\t\tstopButton.addActionListener(new StopButtonListener());\n\t\t\n\t\t// control panel options\n\t\tsetLayout(new BorderLayout());\n\t\tadd(crystalPanel,BorderLayout.NORTH);\n\t\tadd(changeSpeedButton,BorderLayout.WEST);\n\t\tadd(runButton,BorderLayout.CENTER);\n\t\tadd(stopButton,BorderLayout.EAST);\n\t\t\n\t}\n\t\n\t/**\n\t* ActionListener for the timer.\n\t*/\n\tprivate class TimerListener implements ActionListener {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t// add speed crystallized ions for every delay time\n\t\t\t// stop timer if simulation is complete\n\t\t\tif(!cm.runSomeSteps(speed)) {\n\t\t\t\ttimer.stop();\n\t\t\t}\n\t\t\tcrystalPanel.repaint(); // repaint crystal panel\n\t\t}\n\t}\n\t\n\t/**\n\t* ActionListener for \"change speed\" button.\n\t*/\n\tprivate class SpeedButtonListener implements ActionListener {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t// Option pane\n\t\t\tString input = JOptionPane.showInputDialog(\"Please enter simulation speed: \");\n\t\t\tspeed = Integer.parseInt(input);\n\t\t}\n\t}\n\t\n\t/**\n\t* ActionListener for \"run\" button.\n\t*/\n\tprivate class RunButtonListener implements ActionListener {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tcm.reset(); // reset current crystal model\n\t\t\ttimer.start(); // start timer\n\t\t}\n\t}\n\t\n\t/**\n\t* ActionListener for \"stop\" button.\n\t*/\n\tprivate class StopButtonListener implements ActionListener {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\ttimer.stop(); // stop timer\n\t\t}\n\t}\n}\n",
      "Steg3.java": "import javax.swing.*;\nimport java.util.*;\n/**\n* Purpose: Main class to CrystalModel steg 3 <p>\n* Author: Albin Baeckstrand <p>\n* Group: 67 <p>\n* Assignment: Laboration 3 steg 3, kristallbildning <p>\n* Last changed: 2017-01-30\n*/\npublic class Steg3 extends JFrame {\n\t/**\n\t* Creating a frame that holds control panel\n\t* @param size is width and height of crystal view panel in control panel\n\t*/\n\tpublic Steg3(int size) {\n\t\t// some frame properties\n\t\tsetTitle(\"Crystal Experiment\");\n\t\tsetResizable(false);\n\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);\n\t\t// add the control panel\n\t\tCrystalControl controlPanel = new CrystalControl(size);\n\t\tadd(controlPanel);\n\t\t// pack and make visible\n\t\tpack();\n\t\tsetVisible(true);\n\t}\n\t\n\t/**\n\t* @param args is an argument that represent the size of crystal view panel. <p>\n\t* Note that args.length == 1 and 100 <= args[0] <= 1000.\n\t*/\n\tpublic static void main(String[] args) {\n\t\tif(args.length == 1) { // only one argument\n\t\t\ttry { // catch argument exception\n\t\t\t\tint size = Integer.parseInt(args[0]); // invert from string to int\n\t\t\t\tif(100 <= size && size <= 1000) { // within 100 <= size <= 1000\n\t\t\t\t\tnew Steg3(size);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Argument must be within interval from 100 to 1000\");\n\t\t\t\t}\n\t\t\t} catch(IllegalArgumentException e) {\n\t\t\t\tSystem.out.println(\"Argument must be of type Int\"); // or a string that can be inverted to\n\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t// a int.\n\t\t} else {\n\t\t\tSystem.out.println(\"Too few or too many arguments\");\n\t\t}\n\t}\n}\n"
    },
    "done": false
  },
  {
    "content": "%HEADER%\n\nPå lab 3 kan man få 6p som mest.\n\nGrupp: %GROUP%, inlämning 1\nPoäng: xx, accepterad  retur (inom 7 dagar) %MANUAL%\n\nBra men jag har en/några kommentar(er):\n------------------------------------------------------------------------------- \n\n:::::: Steg3: %FILE: Steg3.java% //Default, recommended\n\n:::::: CrystalModel: %File: CrystalModel.java \t% //Acceptable variant\n\n:::::: CrystalView: %file: \tCrystalView.java  \t% //Acceptable variant\n\n:::::: CrystalControl: %  \tFILE:CrystalControl.java  % //Acceptable variant\n\n\nHälsningar,\n%NAME%",
    "header": "",
    "teacher": "",
    "group": "69",
    "assignment": "",
    "files": {
      "26.txt": "Kommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nLab 3 kan ge max 6p.\n\nGrupp: 26, inlämning 1\nPoäng: xx, accepterad\n\nBra, här är mina kommentar(er):\n\nAllmänt: \n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\nRichard Sundqvist\n",
      "21.txt": "Kommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nLab 3 kan ge max 6p.\n\nGrupp: 21, inlämning 1\nPoäng: 0, retur (inom 7 dagar)\n\nBra, här är mina kommentar(er):\n\nallmänt: \n- Kraven under \"Specialla krav\" är krav, inte förslag:\n\"Simuleringen startas med java Steg3 size däre size är bredden och höjden på badet\"\n\nDet är helt OK att ha extra finesser såsom sliders men programmet ska fortfarande\ndelas upp på ett vettigt sätt.\n\nSkapa klasserna i separata filer (undantag t.ex. action listeners, inte relevant\ni ert fall när ni använder lamba notation) och lämna in igen. Hela tanken med\nMVC är just att saker såsom GUI inte ska ligga i modellen.\n\nNi bör (ska) ha separata klasser för Model, View samt Control i egna filer.\n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\nRichard Sundqvist\n",
      "137.txt": "Kommentarerna som vi ger är försedda med ett prefix i form av ett tecken:\nFörstår du inte vad rättaren menar? Maila och fråga - vi bits inte :-)\n\nAlla kommentarer skall du rätta. Inga felanmärkningar skall naturligtvis \nupprepas i senare labbar.\n\n\"-\"   markerar en allvarlig kommentar som antagligen har resulterat i en retur.\n\"=\"   markerar en allvarlig kommentar som *inte* har resulterat i en retur utan\n\t  enbart poängavdrag. Många \"=\" kan också resultera i en retur.\n\"#\"   markerar en mindre allvarlig kommentar.\n\"*\"   kommentar, behöver ej åtgärdas.\n\"+\"   extra bra\n-------------------------------------------------------------------------------\nPoäng och returpolicy finns beskrivet under \"assignments->Lab acceptance rules\".\naccept på labben innebär att man inte kan lämna in igen \n(men inte att det är \"godkänd\")\nreject på labben att man kan eller måste lämna in igen och kan ev. få 1p till.\nOm du får retur på bara en uppgift, lämna bara in den uppgiften nästa gång.\n-------------------------------------------------------------------------------\n\nLab 3 kan ge max 6p.\n\nGrupp: 137, inlämning 1\nPoäng: xx, accepterad\n\nBra, här är mina kommentar(er):\n\nAllmänt: \n\nSteg3:\n\nCrystalControl: \n\nCrystalView:\n\nCrystalModel:\n\nRichard Sundqvist\n"
    },
    "done": false
  }
]