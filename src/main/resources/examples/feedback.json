[
  {
    "files": {
      "StudentFileViewerController.java": "package gui.feedback;\n\nimport gui.Tools;\nimport javafx.event.Event;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.CheckBox;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TabPane;\nimport javafx.scene.control.ToggleButton;\nimport javafx.scene.input.DragEvent;\nimport javafx.scene.input.Dragboard;\nimport javafx.scene.input.TransferMode;\nimport javafx.stage.FileChooser;\nimport javafx.util.Pair;\nimport model.Feedback;\nimport model.IO;\n\nimport java.io.File;\nimport java.util.Map;\n\n/**\n * Created by Richard Sundqvist on 26/03/2017.\n */\npublic class StudentFileViewerController {\n    @FXML\n    private Label fileLabel = null;\n    @FXML\n    private TabPane sourceTabs = null;\n    @FXML\n    private Label copiedLabel = null;\n\n    private FileTab currentFileTab = null;\n    private boolean feedbackLine = true, feedbackColumn = false;\n    private final FileFeedbackListener listener;\n    private final Feedback feedback;\n    private boolean editable = false;\n\n    public StudentFileViewerController (FileFeedbackListener listener, Feedback feedback) {\n        this.listener = listener;\n        this.feedback = feedback;\n    }\n\n    @FXML\n    private void initialize () {\n        copiedLabel.setOpacity(0);\n        sourceTabs.getSelectionModel().selectedItemProperty().addListener(event -> {\n            currentFileTab = (FileTab) sourceTabs.getSelectionModel().getSelectedItem();\n\n            if (currentFileTab == null)\n                fileLabel.setText(\"Drag and drop to add files!\");\n            else\n                fileLabel.setText(currentFileTab.getText());\n        });\n\n        Map<String, String> files = feedback.getFiles();\n        for (String key : files.keySet())\n            sourceTabs.getTabs().add(new FileTab(key, files.get(key)));\n    }\n\n    public void onFeedback () {\n        if (currentFileTab != null) {\n            int line = getCaretLine();\n            int column = getCaretColumn();\n            int pos = currentFileTab.getCaretPosition();\n            listener.feedbackAt(currentFileTab.getText(), line, column, pos);\n        }\n    }\n\n    public void toggleEditable (Event e) {\n\n        if (!sourceTabs.getTabs().isEmpty()) {\n            ToggleButton toggleButton = (ToggleButton) e.getSource();\n            editable = toggleButton.isSelected();\n\n            if (editable) {\n                toggleButton.setText(\"Save\");\n                sourceTabs.getTabs().forEach(tab -> ((FileTab) tab).setEditable(true));\n            } else {\n                toggleButton.setText(\"Edit\");\n                sourceTabs.getTabs().forEach(tab -> {\n                    FileTab fileTab = (FileTab) tab;\n                    feedback.addFile(fileTab.getText(), fileTab.getCodeAreaContent());\n                    fileTab.setEditable(false);\n                });\n            }\n        }\n    }\n\n    public int getCaretLine () {\n        return feedbackLine ? currentFileTab.getCaretLine() : -1;\n    }\n\n    public int getCaretColumn () {\n        return feedbackColumn ? currentFileTab.getCaretColumn() : -1;\n    }\n\n    public void toggleFeedbackLine (Event event) {\n        feedbackLine = ((CheckBox) event.getSource()).isSelected();\n    }\n\n    public void toggleFeedbackColumn (Event event) {\n        feedbackColumn = ((CheckBox) event.getSource()).isSelected();\n    }\n\n    public void onDragDropped (DragEvent event) {\n        Dragboard db = event.getDragboard();\n        boolean success = false;\n        if (db.hasFiles()) {\n            success = true;\n\n            for (File file : db.getFiles()) {\n                String content = IO.getFileAsString(file);\n                addFile(file.getName(), content);\n            }\n        }\n        event.setDropCompleted(success);\n        event.consume();\n    }\n\n    public void onDragOver (DragEvent event) {\n        Dragboard db = event.getDragboard();\n\n        if (db.hasFiles())\n            event.acceptTransferModes(TransferMode.COPY);\n        else\n            event.consume();\n    }\n\n    public void onAdd () {\n        FileChooser fileChooser = new FileChooser();\n        File file = fileChooser.showOpenDialog(null);\n        if (file != null)\n            addFile(file.getName(), IO.getFileAsString(file));\n    }\n\n    public void onDelete () {\n        if (currentFileTab != null) {\n            feedback.removeFile(currentFileTab.getFileName());\n            sourceTabs.getTabs().remove(currentFileTab);\n        }\n    }\n\n    public void addFile (String fileName, String content) {\n        feedback.addFile(fileName, content);\n        FileTab fileTab = new FileTab(fileName, content);\n        fileTab.setEditable(editable);\n        sourceTabs.getTabs().add(fileTab);\n    }\n\n    public Pair<String, Integer> getCurrentFileAndCaretPos () {\n        String file = currentFileTab == null ? null : currentFileTab.getText();\n        int pos = currentFileTab.getCaretPosition();\n        return new Pair(file, pos);\n    }\n\n    public FileTab getCurrentFileTab () {\n        return currentFileTab;\n    }\n\n    public interface FileFeedbackListener {\n        void feedbackAt (String file, int caretLine, int caretColumn, int caretPosition);\n\n        void feedbackAt (String file, String content, int caretLine, int caretColumn, int caretPosition);\n    }\n\n    public void flashCopiedlabel () {\n        Tools.flashNode(copiedLabel);\n    }\n}\n",
      "JavaCodeArea.java": "package gui.feedback;\n\nimport org.fxmisc.richtext.CodeArea;\nimport org.fxmisc.richtext.LineNumberFactory;\nimport org.fxmisc.richtext.ViewActions;\nimport org.fxmisc.richtext.model.StyleSpans;\nimport org.fxmisc.richtext.model.StyleSpansBuilder;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by Richard Sundqvist on 17/04/2017.\n */\npublic class JavaCodeArea extends CodeArea {\n\n    // region strings\n    private static final String[] KEYWORDS = new String[]{\"abstract\", \"assert\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"default\", \"do\", \"double\", \"else\", \"enum\", \"extends\", \"final\", \"finally\", \"float\", \"for\", \"goto\", \"if\", \"implements\", \"import\", \"instanceof\", \"int\", \"interface\", \"long\", \"native\", \"new\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"strictfp\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\", \"try\", \"void\", \"volatile\", \"while\", \"null\", \"->\"};\n\n    private static final String KEYWORD_PATTERN = \"\\\\b(\" + String.join(\"|\", KEYWORDS) + \")\\\\b\";\n    private static final String PAREN_PATTERN = \"\\\\(|\\\\)\";\n    private static final String BRACE_PATTERN = \"\\\\{|\\\\}\";\n    private static final String BRACKET_PATTERN = \"\\\\[|\\\\]\";\n    private static final String SEMICOLON_PATTERN = \"\\\\;\";\n    private static final String STRING_PATTERN = \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\";\n    private static final String COMMENT_PATTERN = \"//[^\\n]*\" + \"|\" + \"/\\\\*(.|\\\\R)*?\\\\*/\";\n\n    private static final Pattern PATTERN = Pattern.compile(\"(?<KEYWORD>\" + KEYWORD_PATTERN + \")\" + \"|(?<PAREN>\" + PAREN_PATTERN + \")\" + \"|(?<BRACE>\" + BRACE_PATTERN + \")\" + \"|(?<BRACKET>\" + BRACKET_PATTERN + \")\" + \"|(?<SEMICOLON>\" + SEMICOLON_PATTERN + \")\" + \"|(?<STRING>\" + STRING_PATTERN + \")\" + \"|(?<COMMENT>\" + COMMENT_PATTERN + \")\");\n    // endregion\n\n    public JavaCodeArea () {\n        this(null);\n    }\n\n    public JavaCodeArea (String initialContent) {\n        setStyle(\"-fx-font-family: consolas; -fx-font-size: 11pt;-fx-background-color: #dddddd;\");\n        setShowCaret(ViewActions.CaretVisibility.ON);\n        setParagraphGraphicFactory(LineNumberFactory.get(this));\n\n        richChanges().filter(ch -> !ch.getInserted().equals(ch.getRemoved())).subscribe(change -> {\n            setStyleSpans(0, computeHighlighting(getText()));\n        });\n        if (initialContent != null)\n            replaceText(0, 0, initialContent);\n    }\n\n    public void setText (String s) {\n        if (getText() != null && s != null && s.length() > 0)\n            replaceText(0, getText().length(), s);\n    }\n\n    // @formatter:off\n    private static StyleSpans<Collection<String>> computeHighlighting(String text) {\n        Matcher matcher = PATTERN.matcher(text);\n        int lastKwEnd = 0;\n        StyleSpansBuilder<Collection<String>> spansBuilder = new StyleSpansBuilder<>();\n        while (matcher.find()) {\n            String styleClass =\n                    matcher.group(\"KEYWORD\") != null\n                            ? \"keyword\"\n                            : matcher.group(\"PAREN\") != null\n                                    ? \"paren\"\n                                    : matcher.group(\"BRACE\") != null\n                                            ? \"brace\"\n                                            : matcher.group(\"BRACKET\") != null\n                                                    ? \"bracket\"\n                                                    : matcher.group(\"SEMICOLON\") != null\n                                                            ? \"semicolon\"\n                                                            : matcher.group(\"STRING\") != null\n                                                                    ? \"string\"\n                                                                    : matcher.group(\"COMMENT\")\n                                                                                    != null\n                                                                            ? \"comment\"\n                                                                            : null; /* never happens */\n            assert styleClass != null;\n            spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);\n            spansBuilder.add(Collections.singleton(styleClass), matcher.end() - matcher.start());\n            lastKwEnd = matcher.end();\n        }\n        spansBuilder.add(Collections.emptyList(), text.length() - lastKwEnd);\n        return spansBuilder.create();\n    }\n    // @formatter:on\n}\n",
      "FileTab.java": "package gui.feedback;\n\nimport javafx.scene.control.Tab;\nimport org.fxmisc.flowless.VirtualizedScrollPane;\nimport org.fxmisc.richtext.CodeArea;\nimport org.fxmisc.richtext.model.TwoDimensional;\n\n/**\n * Created by Richard Sundqvist on 12/04/2017.\n */\npublic class FileTab extends Tab {\n\n    private final CodeArea codeArea;\n    private final int firstNumber; // Set to 1 to set the first line to 1.\n\n    public FileTab (String fileName, String content) {\n        this(fileName, content, false);\n    }\n\n    /**\n     * @param fileName Name of the file.\n     * @param content Content of the file\n     * @param startFromZero If {@code true}, row count begins at zero.\n     */\n    public FileTab (String fileName, String content, boolean startFromZero) {\n        firstNumber = startFromZero ? 0 : 1;\n\n        setText(fileName);\n        setClosable(false);\n\n        codeArea = new JavaCodeArea(content);\n        codeArea.setEditable(false);\n        setContent(new VirtualizedScrollPane<>(codeArea));\n    }\n\n    public String getFileName () {\n        return getText();\n    }\n\n    public int getCaretLine () {\n        int offset = codeArea.getCaretPosition();\n        TwoDimensional.Position pos = codeArea.offsetToPosition(offset, TwoDimensional.Bias.Forward);\n        return pos.getMajor() + firstNumber;\n    }\n\n    public String getCodeAreaContent () {\n        return codeArea.getText();\n    }\n\n    public int getCaretColumn () {\n        int offset = codeArea.getCaretPosition();\n        TwoDimensional.Position pos = codeArea.offsetToPosition(offset, TwoDimensional.Bias.Forward);\n        return pos.getMinor() + firstNumber;\n    }\n\n    public int getCaretPosition () {\n        return codeArea.getCaretPosition();\n    }\n\n    public void setEditable (boolean value) {\n        codeArea.setEditable(value);\n    }\n}\n",
      "StudentFileViewer.java": "package gui.feedback;\n\n/**\n * Created by Richard Sundqvist on 26/03/2017.\n */\n\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.layout.BorderPane;\nimport model.Feedback;\nimport model.IO;\n\n/**\n * Created by Richard Sundqvist on 26/03/2017.\n */\npublic class StudentFileViewer extends BorderPane {\n    private StudentFileViewerController controller;\n\n    public StudentFileViewer (StudentFileViewerController.FileFeedbackListener listener, Feedback feedback) {\n\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/studentFileViewer.fxml\"));\n        fxmlLoader.setController(new StudentFileViewerController(listener, feedback));\n        BorderPane root;\n        try {\n            root = fxmlLoader.load();\n            setCenter(root);\n        } catch (Exception e) {\n            IO.showExceptionAlert(e);\n            e.printStackTrace();\n        }\n\n        maxWidth(-1);\n        maxHeight(-1);\n        setStyle(\"-fx-background: rgb(225, 228, 203);\");\n        // setStyle(\"-fx-background: #123456;\");\n        controller = fxmlLoader.getController();\n    }\n\n    public void addFile (String fileName, String content) {\n        controller.addFile(fileName, content);\n    }\n\n    public StudentFileViewerController getController () {\n        return controller;\n    }\n}\n",
      "FeedbackViewController.java": "package gui.feedback;\n\nimport gui.Tools;\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.event.Event;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.ButtonType;\nimport javafx.scene.control.CheckBox;\nimport javafx.scene.control.ContextMenu;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.ListView;\nimport javafx.scene.control.MenuItem;\nimport javafx.scene.control.ProgressBar;\nimport javafx.scene.control.SelectionMode;\nimport javafx.scene.control.SeparatorMenuItem;\nimport javafx.scene.control.Tab;\nimport javafx.scene.control.TabPane;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.control.TextField;\nimport javafx.scene.control.TextInputDialog;\nimport javafx.scene.control.TitledPane;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyCodeCombination;\nimport javafx.scene.input.KeyCombination;\nimport javafx.scene.input.KeyEvent;\nimport javafx.scene.input.MouseButton;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.Priority;\nimport javafx.util.Duration;\nimport model.Feedback;\nimport model.FeedbackManager;\nimport model.IO;\nimport model.Pasta;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * Created by Richard Sundqvist on 19/02/2017.\n */\npublic class FeedbackViewController {\n\n    private static final int SUPPRESS_CONFIRMATION_DURATION = 90; // in seconds\n    // region Field\n    // ================================================================================= //\n    // Field\n    // ================================================================================= //\n    @FXML\n    private Tab groupTab, setupTab, progressTab;\n    @FXML\n    private TextField studentGroupField, assignmentField;\n    @FXML\n    private Label progressLabel;\n    @FXML\n    private TabPane feedbackTabPane, rootTabPane;\n    @FXML\n    private TextArea teacherField, templateTextArea, templateHeaderTextArea, templateFooterTextArea;\n\n    @FXML\n    /** Container for the actual feedback tabs. */ private ListView feedbackTabListView;\n\n    private FeedbackManager feedbackManager = new FeedbackManager();\n    private List<GroupTab> groupTabs = new ArrayList<>();\n    // endregion\n    private boolean hideDoneItems;\n    @FXML\n    private Label numFeedback, numDone, numNotDone;\n    @FXML\n    private ProgressBar progressBar;\n    @FXML\n    private ListView doneListView, notDoneListView;\n    private boolean suppressClearDoneDialog = false;\n    private boolean suppressClearNotDoneDialog = false;\n\n    public void updateFeedbackTabLockStatus () {\n        boolean empty = feedbackTabPane.getTabs().isEmpty();\n        groupTab.setDisable(empty);\n        if (empty)\n            rootTabPane.getSelectionModel().select(setupTab);\n    }\n\n    public void createFeedbackItems (List<String> groups) {\n        // Groups exist already? Modified?\n\n        updateTemplate(); // make sure template is up-to-date for isContentModified\n        List<Feedback> existing = feedbackManager.getByGroup(groups);\n        List<Feedback> existingModified = feedbackManager.isContentModified(existing);\n        List<Feedback> existingUnmodified = new ArrayList<>(existing);\n        existingUnmodified.removeAll(existingModified);\n\n        int numClash = existing.size();\n        if (numClash > 0) {\n            String contentText = \"Groups with modified content: \\n\\t\" + FeedbackManager.getGroups(existingModified) + \"\\n\" + \"Groups without modified content (unchanged): \\n\\t\" + FeedbackManager.getGroups(existingUnmodified);\n\n            ButtonType replaceAll = new ButtonType(\"Overwrite All (\" + numClash + \")\");\n            ButtonType replaceUnchanged = new ButtonType(\"Overwrite Unchanged (\" + existingUnmodified.size() + \")\");\n\n            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, contentText, replaceAll, replaceUnchanged, ButtonType.CANCEL);\n            alert.setHeaderText(\"Overwrite existing groups?\");\n\n            Optional<ButtonType> result = alert.showAndWait();\n            if (!result.isPresent() || result.get() == ButtonType.CANCEL)\n                return;\n\n            if (result.get() == replaceAll) {\n                feedbackManager.removeFeedback(existing);\n                removeFeedbackTabs(existing);\n            } else if (result.get() == replaceUnchanged) {\n                feedbackManager.removeFeedback(existingUnmodified);\n                removeFeedbackTabs(existingUnmodified);\n            } else {\n                throw new IllegalStateException(\"Unhandled case: \" + result.get());\n            }\n        }\n        List<Feedback> newFeedbackList = feedbackManager.generateFeedback(groups);\n\n        if (newFeedbackList != null) {\n            for (Feedback feedback : newFeedbackList)\n                createFeedbackTab(feedback);\n\n            if (newFeedbackList.size() > 1)\n                rootTabPane.getSelectionModel().select(groupTab);\n        }\n\n        updateFeedbackTabLockStatus();\n    }\n\n    /**\n     * FXML onAction for \"Create Feedback\" button.\n     */\n    public void createFeedbackItems () {\n        String str = studentGroupField.getText();\n        List<String> groups = FeedbackManager.parseGroupString(str);\n        createFeedbackItems(groups);\n    }\n\n    private void removeFeedbackTabs (List<Feedback> feedbackList) {\n        List<GroupTab> removedGroupTabs = getFeedbackTabs(feedbackList);\n\n        feedbackTabListView.getItems().removeAll(removedGroupTabs);\n        feedbackTabPane.getTabs().removeAll(removedGroupTabs);\n        groupTabs.removeAll(removedGroupTabs);\n        updateFeedbackTabLockStatus();\n    }\n\n    private List<GroupTab> getFeedbackTabs (List<Feedback> feedbackList) {\n        List<GroupTab> removedGroupTabs = new ArrayList<>();\n\n        for (GroupTab tab : groupTabs)\n            if (feedbackList.contains(tab.getFeedback()))\n                removedGroupTabs.add(tab);\n        return removedGroupTabs;\n    }\n\n    private void updateTemplate () {\n        Feedback template = feedbackManager.getTemplate();\n        template.setContent(templateTextArea.getText());\n        template.setHeader(templateHeaderTextArea.getText());\n        template.setFooter(templateFooterTextArea.getText());\n        template.setSignature(teacherField.getText());\n        template.setAssignment(getAssignment());\n        feedbackManager.setTemplate(template);\n    }\n\n    private void createFeedbackTab (Feedback feedback) {\n        GroupTab tab = new GroupTab(feedback);\n        tab.setContextMenu(createFeedbackTabContextMenu(tab));\n        tab.setOnClosed(event -> updateFeedbackTabLockStatus());\n        if (!feedback.isDone())\n            feedbackTabPane.getTabs().add(tab);\n        feedbackTabListView.getItems().add(tab);\n        groupTabs.add(tab);\n    }\n\n    private ContextMenu createFeedbackTabContextMenu (GroupTab tab) {\n        ContextMenu contextMenu = new ContextMenu();\n\n        MenuItem changeGroup = new MenuItem(\"Change group\");\n        changeGroup.setOnAction(event -> changeFeedbackGroup(tab));\n\n        MenuItem toggleDone = new MenuItem(\"Toggle done\");\n        toggleDone.setAccelerator(new KeyCodeCombination(KeyCode.D, KeyCombination.CONTROL_DOWN));\n        toggleDone.setOnAction(event -> toggleDone(tab, true));\n\n        MenuItem preview = new MenuItem(\"Preview\");\n        preview.setOnAction(event -> preview(tab));\n\n        MenuItem exportTxt = new MenuItem(\"Export .txt\");\n        exportTxt.setOnAction(event -> exportFeedbackAsTxt(tab.getFeedback()));\n\n        MenuItem exportJson = new MenuItem(\"Export .json\");\n        exportJson.setOnAction(event -> exportFeedbackAsJson(tab.getFeedback()));\n\n        MenuItem delete = new MenuItem(\"Delete\");\n        delete.setOnAction(event -> deleteFeedback(tab));\n\n        contextMenu.getItems().addAll(changeGroup, toggleDone, preview, new SeparatorMenuItem(), exportTxt, exportJson, new SeparatorMenuItem(), delete);\n\n        return contextMenu;\n    }\n\n    public void exportTemplate () {\n        updateTemplate();\n        IO.exportSingleFeedbackAsJson(null, feedbackManager.getTemplate());\n    }\n\n    public void importTemplate () {\n        File file = IO.showJSONOpenDialog();\n        Feedback template = IO.importFeedbackSingle(file);\n        setFeedbackTemplate(template);\n    }\n\n    public void exportAllFeedback () {\n        exportFeedback(extractFeedback(false), true, true);\n    }\n\n    public void exportFeedbackAsTxt (Feedback feedback) {\n        List<Feedback> feedbackList = new ArrayList<>(1);\n        feedbackList.add(feedback);\n        exportFeedback(feedbackList, true, false);\n    }\n\n    public void exportFeedbackAsJson (Feedback feedback) {\n        List<Feedback> feedbackList = new ArrayList<>(1);\n        feedbackList.add(feedback);\n        exportFeedback(feedbackList, false, true);\n    }\n\n    public void exportFeedbackAsTxt () {\n        exportFeedback(extractFeedback(true), true, false);\n    }\n\n    public void exportFeedbackAsJson () {\n        exportFeedback(extractFeedback(true), false, true);\n    }\n\n    private boolean exportFeedback (List<Feedback> feedbackList, boolean asTxt, boolean asJson) {\n        if (feedbackList == null || feedbackList.isEmpty() || !(asTxt || asJson))\n            return false;\n\n        updateTemplate();\n        feedbackManager.updateFeedback();\n\n        if (checkManualTags(feedbackList))\n            return false;\n\n        boolean exportSuccessful;\n        if (asTxt && asJson) {\n            exportSuccessful = IO.exportFeedbackAsTxtAndJson(null, feedbackList);\n        } else if (feedbackList.size() == 1) { // Only one item\n            Feedback feedback = feedbackList.get(0);\n            String initialFileName = feedback.getGroup();\n            File file = IO.showSaveDialog(null, initialFileName, asTxt ? \"txt\" : \"json\");\n\n            if (asTxt)\n                exportSuccessful = IO.printStringToFile(feedback.getStylizedContent(), file);\n            else\n                exportSuccessful = IO.exportFeedbackAsJson(feedbackList, file);\n        } else {\n            if (asTxt)\n                exportSuccessful = IO.exportFeedbackAsTxt(null, feedbackList);\n            else\n                exportSuccessful = IO.exportFeedbackAsJson(null, feedbackList);\n        }\n\n        return exportSuccessful;\n    }\n\n    /**\n     * Returns true if the user wishes to abort.\n     */\n    public boolean checkManualTags (List<Feedback> feedbackList) {\n        List<Feedback> badFeedbackList = Feedback.checkManual(feedbackList);\n\n        if (badFeedbackList.isEmpty())\n            return false;\n\n        List<String> groups = FeedbackManager.getGroups(badFeedbackList);\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.getButtonTypes().clear();\n        alert.getButtonTypes().addAll(ButtonType.YES, ButtonType.NO);\n        alert.setTitle(\"Incomplete items found\");\n        alert.setHeaderText(\"Found \" + badFeedbackList.size() + \" incomplete items (of \" + feedbackList.size() + \" items total)\");\n        alert.setContentText(\"It looks like you're trying to export items with the \" + Feedback.MANUAL + \" tag present, \" + \"indicating that some items have content not meant for the student. Rectify before exporting?\");\n\n        // Content tags\n        Label contentLabel = new Label(\"Groups: \");\n        contentLabel.setMaxHeight(Double.MAX_VALUE);\n\n        String badGroups = groups.toString();\n        badGroups = badGroups.substring(1, badGroups.length() - 1);\n\n        TextField badGroupsTextField = new TextField(badGroups);\n        badGroupsTextField.setEditable(false);\n        badGroupsTextField.setMaxWidth(Double.MAX_VALUE);\n        HBox.setHgrow(badGroupsTextField, Priority.ALWAYS);\n\n        HBox contentTagsHBox = new HBox();\n        contentTagsHBox.getChildren().addAll(contentLabel, badGroupsTextField);\n        HBox.setHgrow(badGroupsTextField, Priority.ALWAYS);\n\n        // Set expandable Exception into the dialog pane.\n        alert.getDialogPane().setExpandableContent(contentTagsHBox);\n        alert.getDialogPane().setExpanded(true);\n\n        Optional<ButtonType> result = alert.showAndWait();\n\n        if (!result.isPresent() || result.get() != ButtonType.NO) { // Default to assuming user wants to fix content.\n            List<GroupTab> badGroupTabs = getFeedbackTabs(badFeedbackList);\n            for (GroupTab groupTab : badGroupTabs) {\n                groupTab.getFeedback().setDone(true);\n                toggleDone(groupTab, false);\n            }\n            feedbackTabPane.getTabs().removeAll(badGroupTabs);\n            feedbackTabPane.getTabs().addAll(0, badGroupTabs);\n            feedbackTabPane.getSelectionModel().select(0);\n            rootTabPane.getSelectionModel().select(groupTab);\n            updateFeedbackTabLockStatus();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Extract feedback from {@link #feedbackTabListView}, or copy the list from the manager.\n     *\n     * @param selectedOnly If {@true}, extract selection only. Otherwise extract everything in them\n     * manager.\n     * @return A list of feedback.\n     */\n    private List<Feedback> extractFeedback (boolean selectedOnly) {\n        List<Feedback> feedbackList = new ArrayList<>();\n\n        if (selectedOnly) {\n            List<GroupTab> tabs = feedbackTabListView.getSelectionModel().getSelectedItems();\n            for (GroupTab tab : tabs)\n                feedbackList.add(tab.getFeedback());\n        } else {\n            feedbackList.addAll(feedbackManager.getFeedbackList());\n        }\n\n        return feedbackList;\n    }\n\n    public void deleteFeedback () {\n        if (!feedbackTabListView.isFocused())\n            return;\n\n        List<Object> selectedItems = new ArrayList<>(feedbackTabListView.getSelectionModel().getSelectedItems());\n        // Must use copy, feedbackTabListView.getItems().remove() calls will cause issues otherwise.\n\n        int numberOfItems = selectedItems.size();\n        if (numberOfItems > 1 && !Tools.confirmDelete(numberOfItems))\n            return;\n\n        if (numberOfItems == 1) {\n            GroupTab tab = ((GroupTab) selectedItems.get(0));\n            updateTemplate();\n            if (feedbackManager.isContentModified(tab.getFeedback())) {\n\n                String contentText = \"The content of this feedback seems to have been modified.\";\n                Alert alert = new Alert(Alert.AlertType.CONFIRMATION, contentText, ButtonType.OK, ButtonType.CANCEL);\n\n                alert.setHeaderText(\"Really delete feedback for group \\\"\" + tab.getFeedback().getGroup() + \"\\\"?\");\n\n                Optional<ButtonType> result = alert.showAndWait();\n                if (!result.isPresent() || result.get() != ButtonType.OK)\n                    return;\n            }\n        }\n\n        for (Object o : selectedItems)\n            deleteFeedback((GroupTab) o);\n\n        updateFeedbackTabLockStatus();\n    }\n\n    private void deleteFeedback (GroupTab tab) {\n        if (tab == null)\n            return;\n\n        feedbackTabPane.getTabs().remove(tab);\n        feedbackTabListView.getItems().remove(tab);\n        groupTabs.remove(tab);\n        feedbackManager.removeFeedback(tab.getFeedback());\n        updateFeedbackTabLockStatus();\n    }\n\n    public void importFeedback () {\n        List<Feedback> feedbackList = feedbackManager.importFeedback();\n\n        if (feedbackList != null)\n            updateAfterFeedbackImport(feedbackList);\n    }\n\n    /**\n     * Import feedback.\n     *\n     * @param feedbackList The feedback to import.\n     * @param replaceAll if {@code true}, old feedback is cleared.\n     */\n    public void importFeedbackAddTemplateContent (List<Feedback> feedbackList, boolean replaceAll) {\n        updateTemplate();\n        if (replaceAll)\n            clearFeedback();\n\n        List<Feedback> newFeedbackList = feedbackManager.importFeedback(feedbackList, true);\n        updateAfterFeedbackImport(newFeedbackList);\n    }\n\n    private void updateAfterFeedbackImport (List<Feedback> feedbackList) {\n        for (Feedback feedback : feedbackList)\n            createFeedbackTab(feedback);\n\n        rootTabPane.getSelectionModel().select(groupTab);\n        updateFeedbackTabLockStatus();\n    }\n\n    public void initialize () {\n        feedbackTabListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n        doneListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n        notDoneListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n\n        // Feedback\n        Feedback template;\n        template = feedbackManager.importSavedTemplate();\n        if (template == null)\n            template = new Feedback();\n        setFeedbackTemplate(template);\n\n        // Feedback\n        List<Feedback> feedbackList = feedbackManager.importSavedFeedback();\n        if (feedbackList != null)\n            // feedbackManager.importFeedback(feedbackList); //TODO\n            for (Feedback feedback : feedbackList)\n                createFeedbackTab(feedback);\n\n        if (feedbackManager.getFeedbackList().isEmpty())\n            rootTabPane.getSelectionModel().select(setupTab);\n\n        updateFeedbackTabLockStatus();\n    }\n\n    public void setFeedbackTemplate (Feedback template) {\n        if (template == null)\n            return;\n\n        updateTemplate(template);\n    }\n\n    private void updateTemplate (Feedback template) {\n        feedbackManager.setTemplate(template);\n        teacherField.setText((template.getSignature()));\n        assignmentField.setText(template.getAssignment());\n        templateTextArea.setText(template.getContent());\n        templateHeaderTextArea.setText(template.getHeader());\n        templateFooterTextArea.setText(template.getFooter());\n    }\n\n    public void onMouseClicked (MouseEvent event) {\n        GroupTab tab = (GroupTab) feedbackTabListView.getSelectionModel().getSelectedItem();\n        if (event.getButton().equals(MouseButton.PRIMARY) && tab != null) { // mouseEvent.isPrimaryButtonDown()\n            if (feedbackTabPane.getTabs().contains(tab))\n                feedbackTabPane.getSelectionModel().select(tab);\n            else\n                feedbackTabPane.getTabs().add(tab);\n\n            if (event.getClickCount() > 1)\n                preview();\n        }\n        updateFeedbackTabLockStatus();\n    }\n\n    public void clear () {\n        String contentText = \"Really delete all feedback? There are currently \" + feedbackManager.getFeedbackList().size() + \" items.\";\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, contentText, ButtonType.OK, ButtonType.CANCEL);\n        alert.setHeaderText(\"Really delete all feedback?\");\n\n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK)\n            clearFeedback();\n    }\n\n    private void clearFeedback () {\n        feedbackTabPane.getTabs().removeAll(groupTabs);\n        feedbackTabListView.getItems().clear();\n        feedbackManager.clear();\n        groupTabs.clear();\n        updateFeedbackTabLockStatus();\n    }\n\n    public void changeFeedbackGroup () {\n        GroupTab tab = (GroupTab) feedbackTabListView.getSelectionModel().getSelectedItem();\n        if (tab == null)\n            return;\n\n        changeFeedbackGroup(tab);\n    }\n\n    private void changeFeedbackGroup (GroupTab tab) {\n        Feedback feedback = tab.getFeedback();\n\n        TextInputDialog dialog = new TextInputDialog(feedback.getGroup());\n        dialog.setTitle(\"Change group number\");\n        dialog.setHeaderText(\"Change group number\");\n        dialog.setContentText(\"Enter new group number: \");\n        Optional<String> result = dialog.showAndWait();\n\n        if (result.isPresent() && result.get() != null) {\n            String newGroup = result.get();\n            tab.setTitle(newGroup);\n            feedback.setGroup(newGroup);\n            feedbackTabListView.refresh();\n        }\n    }\n\n    public void save () {\n        Tools.exportSavedFeedback(feedbackManager.getFeedbackList());\n\n        // Feedback\n        Feedback template = new Feedback();\n        template.setSignature(teacherField.getText());\n        template.setContent(templateTextArea.getText());\n        template.setHeader(templateHeaderTextArea.getText());\n        template.setFooter(templateFooterTextArea.getText());\n        template.setAssignment(getAssignment());\n        Tools.exportSavedTemplate(template);\n    }\n\n    public void preview () {\n        GroupTab tab = (GroupTab) feedbackTabListView.getSelectionModel().getSelectedItem();\n        preview(tab);\n    }\n\n    private void preview (GroupTab tab) {\n        if (tab == null)\n            return;\n\n        Feedback feedback = tab.getFeedback();\n        updateTemplate();\n        feedbackManager.updateFeedback(feedback);\n        FeedbackManager.preview(feedback);\n    }\n\n    public void quickInsert (Pasta pasta) {\n        GroupTab tab = (GroupTab) feedbackTabPane.getSelectionModel().getSelectedItem();\n        if (tab == null)\n            return;\n        tab.quickInsert(pasta);\n    }\n\n    // region Status\n    // ================================================================================= //\n    // Status\n    // ================================================================================= //\n\n    /**\n     * Called from main controller.\n     */\n    public void toggleDoneTab () {\n        Tab tab = feedbackTabPane.getSelectionModel().getSelectedItem();\n        toggleDone((GroupTab) tab, true);\n    }\n\n    /**\n     * Toggle done for the list.\n     */\n    public void toggleDone () {\n        // TODO focus\n        // if (!feedbackTabListView.isFocused())\n        //    return;\n\n        List<Object> selectedItems = feedbackTabListView.getSelectionModel().getSelectedItems();\n\n        if (!selectedItems.isEmpty()) {\n            for (Object o : selectedItems)\n                toggleDone((GroupTab) o, false);\n\n            if (feedbackManager.isAllFeedbackDone())\n                allFeedbackDone();\n        }\n    }\n\n    public void toggleDone (GroupTab tab, boolean checkAllDone) {\n        if (tab == null)\n            return;\n\n        Feedback feedback = tab.getFeedback();\n        feedbackManager.setDoneStatus(feedback, !feedback.isDone());\n        tab.updateTitle();\n\n        if (feedback.isDone())\n            feedbackTabPane.getTabs().remove(tab);\n        if (hideDoneItems)\n            feedbackTabListView.getItems().removeAll(tab);\n        else\n            feedbackTabListView.refresh();\n\n        if (checkAllDone && feedbackManager.isAllFeedbackDone())\n            allFeedbackDone();\n\n        updateFeedbackTabLockStatus();\n    }\n\n    private void allFeedbackDone () {\n        String contentText = \"All feedback is done! Export to .txt-files?\";\n        Alert alert = new Alert(Alert.AlertType.INFORMATION, contentText, ButtonType.YES, ButtonType.NO);\n        alert.setHeaderText(\"All feedback done!\");\n\n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.YES)\n            exportAllFeedback();\n    }\n\n    public void toggleHideDoneItems (Event event) {\n        CheckBox cb = (CheckBox) event.getSource();\n\n        hideDoneItems = cb.isSelected();\n\n        if (hideDoneItems) {\n            List<Feedback> doneFeedbackList = feedbackManager.getDoneFeedbackList();\n            List<GroupTab> doneGroupTabs = getFeedbackTabs(doneFeedbackList);\n\n            feedbackTabPane.getTabs().removeAll(doneGroupTabs);\n            feedbackTabListView.getItems().removeAll(doneGroupTabs);\n\n            if (feedbackManager.isAllFeedbackDone())\n                allFeedbackDone();\n        } else {\n            feedbackTabListView.getItems().clear();\n            feedbackTabListView.getItems().addAll(groupTabs);\n        }\n\n        updateFeedbackTabLockStatus();\n    }\n\n    public void feedbackKeyTyped (KeyEvent event) {\n        if (!feedbackTabPane.isFocused())\n            return;\n\n        Tab tab = feedbackTabPane.getSelectionModel().getSelectedItem();\n        if (tab != null && event.isControlDown() && event.getCode() == KeyCode.D) {\n            toggleDone((GroupTab) tab, true);\n            event.consume();\n        }\n    }\n\n    public void onSelectionChanged (Event event) {\n        Tab statisticsTab = (Tab) event.getSource();\n        if (!statisticsTab.isSelected())\n            return;\n\n        updateStatistics();\n    }\n\n    public void updateStatistics () {\n        int tot = feedbackManager.getFeedbackList().size();\n        int done = feedbackManager.getDoneFeedbackList().size();\n\n        numFeedback.setText(tot + \"\");\n        numDone.setText(done + \"\");\n        numNotDone.setText(feedbackManager.getNotDoneFeedbackList().size() + \"\");\n\n        if (tot == 0) {\n            progressBar.setProgress(-1);\n            progressLabel.setText(\"-\");\n        } else {\n            double pDone = (double) done / tot;\n            progressLabel.setText((int) (pDone * 100 + 0.5) + \" %\");\n            progressBar.setProgress(pDone);\n        }\n\n        updateStatusLists();\n    }\n\n    private void updateStatusLists () {\n        doneListView.getItems().clear();\n        notDoneListView.getItems().clear();\n\n        List<Feedback> done = feedbackManager.getDoneFeedbackList();\n        doneListView.getItems().clear();\n        doneListView.getItems().addAll(getFeedbackTabs(done));\n\n        List<Feedback> notDone = feedbackManager.getNotDoneFeedbackList();\n        notDoneListView.getItems().clear();\n        notDoneListView.getItems().addAll(getFeedbackTabs(notDone));\n    }\n\n    public void exportAllDone () {\n        List<Feedback> feedbackList = feedbackManager.getDoneFeedbackList();\n        suppressClearDoneDialog = exportFeedback(feedbackList, true, true);\n\n        if (suppressClearDoneDialog) {\n            // Reset after a little while\n            Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(SUPPRESS_CONFIRMATION_DURATION), ae -> suppressClearDoneDialog = false));\n            timeline.play();\n        }\n    }\n\n    public void clearDone () {\n        List<Feedback> feedbackList = feedbackManager.getDoneFeedbackList();\n        if (suppressClearDoneDialog || Tools.confirmDelete(feedbackList.size())) {\n            feedbackManager.removeFeedback(feedbackList);\n            updateStatusLists();\n            removeFeedbackTabs(feedbackList);\n        }\n        updateStatistics();\n    }\n\n    public void exportAllNotDone () {\n        List<Feedback> feedbackList = feedbackManager.getNotDoneFeedbackList();\n        suppressClearNotDoneDialog = exportFeedback(feedbackList, true, true);\n\n        // Reset after a little while\n        if (suppressClearNotDoneDialog) {\n            Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(SUPPRESS_CONFIRMATION_DURATION), ae -> suppressClearNotDoneDialog = false));\n            timeline.play();\n        }\n    }\n\n    public void clearAllNotDone () {\n        List<Feedback> feedbackList = feedbackManager.getNotDoneFeedbackList();\n        if (suppressClearNotDoneDialog || Tools.confirmDelete(feedbackList.size())) {\n            feedbackManager.removeFeedback(feedbackList);\n            updateStatusLists();\n            removeFeedbackTabs(feedbackList);\n        }\n        updateStatistics();\n    }\n\n    public String getAssignment () {\n        String assignment = assignmentField.getText();\n\n        if (assignment != null)\n            assignment = assignment.replaceAll(\"\\\\s+\", \"\");\n\n        return assignment;\n    }\n\n    public void selectView (int i) {\n        rootTabPane.getSelectionModel().select(i);\n    }\n    // endregion\n}\n",
      "GroupTab.java": "package gui.feedback;\n\nimport javafx.scene.control.Tab;\nimport javafx.scene.control.TabPane;\nimport javafx.util.Pair;\nimport model.Feedback;\nimport model.Pasta;\n\n/**\n * Created by Richard Sundqvist on 19/02/2017.\n */\npublic class GroupTab extends Tab implements StudentFileViewerController.FileFeedbackListener {\n    public static final int MIN_TITLE_LENGTH = 6;\n    public static final boolean SWITCH_TO_FEEDBACK_ON_QUICKINSERT = false;\n\n    private final Feedback feedback;\n    private final FeedbackText feedbackText;\n    private final TabPane viewsPane;\n    private final Tab feedbackView, fileView;\n    private final StudentFileViewer studentFileViewer;\n\n    public GroupTab (Feedback feedback) {\n        this.feedback = feedback;\n        feedbackText = new FeedbackText(feedback);\n\n        viewsPane = new TabPane();\n\n        feedbackView = new Tab(\"Student Feedback\");\n        feedbackView.setContent(feedbackText);\n        feedbackView.setClosable(false);\n\n        studentFileViewer = new StudentFileViewer(this, feedback);\n        fileView = new Tab();\n        updateStudentFilesText(); // TODO: Update after import through drag-and-drop, etc\n        fileView.setContent(studentFileViewer);\n        fileView.setClosable(false);\n\n        viewsPane.getTabs().addAll(feedbackView, fileView);\n\n        setContent(viewsPane);\n        setClosable(true);\n        updateTitle();\n    }\n\n    private void updateFeedback () {\n        feedback.setContent(feedbackText.getText()); // TODO Too many calls?\n    }\n\n    public Feedback getFeedback () {\n        feedback.setContent(feedbackText.getText());\n        return feedback;\n    }\n\n    public void addFile (String fileName, String content) {\n        studentFileViewer.addFile(fileName, content);\n    }\n\n    public void updateStudentFilesText () {\n        int size = feedback.getFiles().keySet().size();\n        fileView.setText(\"Student Files ( \" + size + \" )\");\n    }\n\n    public String toString () {\n        return getText();\n    }\n\n    public void setTitle (String title) {\n        if (title == null || title.equals(\"\")) {\n            title = \"<Unknown group>\";\n        }\n        if (title.length() < MIN_TITLE_LENGTH) {\n            StringBuilder sb = new StringBuilder(title);\n            while (sb.length() <= MIN_TITLE_LENGTH) {\n                sb.append(\" \");\n            }\n            title = sb.toString();\n        }\n        setText(title);\n    }\n\n    public void updateTitle () {\n        feedbackText.updateColor();\n        setTitle(feedback.getGroup() + (feedback.isDone() ? \" \\u2713\" : \"\"));\n    }\n\n    @Override\n    public void feedbackAt (String file, int caretLine, int caretColumn, int caretPosition) {\n        feedbackText.feedbackAt(file, caretLine, caretColumn, caretPosition);\n        viewsPane.getSelectionModel().select(feedbackView);\n    }\n\n    public void feedbackAt (String file, String content, int caretLine, int caretColumn, int caretPosition) {\n        feedbackText.feedbackAt(file, content, caretLine, caretColumn, caretPosition);\n        viewsPane.getSelectionModel().select(feedbackView);\n    }\n\n    public void quickInsert (Pasta pasta) {\n        Tab tab = viewsPane.getSelectionModel().getSelectedItem();\n        if (tab == null || pasta == null)\n            return;\n\n        if (tab == feedbackView)\n            feedbackText.insertTextAtCaret(pasta.getContent());\n        else if (tab == fileView) {\n            Pair<String, Integer> fileAndCaretPos = studentFileViewer.getController().getCurrentFileAndCaretPos();\n            StudentFileViewerController ctrl = studentFileViewer.getController();\n\n            feedbackText.feedbackAt(fileAndCaretPos.getKey(), pasta.getContent(), ctrl.getCaretLine(), ctrl.getCaretColumn(), -1);\n\n            studentFileViewer.getController().flashCopiedlabel();\n            if (SWITCH_TO_FEEDBACK_ON_QUICKINSERT)\n                viewsPane.getSelectionModel().select(feedbackView);\n        }\n    }\n}\n",
      "hint.txt": "Try to import the \"folder_import_example\" folder found in the examples folder! Files can be\nof any plaintext format, however Java syntax highlight will always be applied.\n",
      "FeedbackText.java": "package gui.feedback;\n\nimport gui.Settings;\nimport javafx.scene.layout.BorderPane;\nimport model.Feedback;\nimport org.fxmisc.flowless.VirtualizedScrollPane;\nimport org.fxmisc.richtext.CodeArea;\nimport org.fxmisc.richtext.LineNumberFactory;\nimport org.fxmisc.richtext.ViewActions;\nimport org.fxmisc.richtext.model.StyleSpans;\nimport org.fxmisc.richtext.model.StyleSpansBuilder;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by Richard Sundqvist on 12/04/2017.\n */\npublic class FeedbackText extends BorderPane implements StudentFileViewerController.FileFeedbackListener {\n\n    // region strings\n    private static final String TAG_PATTERN = \"\\\\%(.*?)\\\\%\";\n\n    private static final Pattern PATTERN = Pattern.compile(\"(?<TAG>\" + TAG_PATTERN + \")\");\n    // endregion\n\n    private final CodeArea codeArea;\n    private final Feedback feedback;\n\n    public FeedbackText (Feedback feedback) {\n        this.feedback = feedback;\n        codeArea = new CodeArea();\n        codeArea.setParagraphGraphicFactory(LineNumberFactory.get(codeArea));\n        codeArea.setShowCaret(ViewActions.CaretVisibility.ON);\n        codeArea.textProperty().addListener(event -> {\n            feedback.setContent(codeArea.getText());\n        });\n\n        codeArea.richChanges().filter(ch -> !ch.getInserted().equals(ch.getRemoved())).subscribe(change -> {\n            String text = codeArea.getText();\n            if (text != null && !text.isEmpty()) // Prevent exception\n                codeArea.setStyleSpans(0, computeHighlighting(text));\n        });\n        setCenter(new VirtualizedScrollPane<>(codeArea));\n        codeArea.replaceText(0, 0, feedback.getContent());\n        updateColor();\n    }\n\n    private static StyleSpans<Collection<String>> computeHighlighting (String text) {\n        Matcher matcher = PATTERN.matcher(text);\n        int lastKwEnd = 0;\n        StyleSpansBuilder<Collection<String>> spansBuilder = new StyleSpansBuilder<>();\n        while (matcher.find()) {\n            String styleClass = matcher.group(\"TAG\") != null ? \"tag\" : null; /* never happens */\n            assert styleClass != null;\n            spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);\n            spansBuilder.add(Collections.singleton(styleClass), matcher.end() - matcher.start());\n            lastKwEnd = matcher.end();\n        }\n        spansBuilder.add(Collections.emptyList(), text.length() - lastKwEnd);\n        return spansBuilder.create();\n    }\n\n    public String getText () {\n        return codeArea.getText();\n    }\n\n    public void updateColor () {\n        if (feedback.isDone())\n            codeArea.setStyle(\"-fx-font-family: consolas; -fx-font-size: 11pt; -fx-background-color: #55e055;\");\n        else\n            codeArea.setStyle(\"-fx-font-family: consolas; -fx-font-size: 11pt; -fx-background-color: #dddddd;\");\n    }\n\n    private static String caretString (int caretLine, int caretColumn) {\n        StringBuilder stringBuilder = new StringBuilder();\n\n        if (caretLine != -1) {\n            stringBuilder.append(\"L\" + caretLine);\n            if (caretColumn != -1)\n                stringBuilder.append(\", \");\n        }\n        if (caretColumn != -1)\n            stringBuilder.append(\"C\" + caretColumn);\n\n        return stringBuilder.toString();\n    }\n\n    @Override\n    public void feedbackAt (String file, int caretLine, int caretColumn, int caretPosition) {\n        int pos = feedback.getFilePosition(file);\n\n        String caretInfo = caretString(caretLine, caretColumn);\n        String text = \"\\nAt \" + caretInfo + \":  \\n\";\n        if (pos < 0) { // No FILE-tag\n            pos = feedback.getContent().indexOf(Feedback.FOOTER) - 1; // Place above footer, if it exists.\n            if (pos < 0) // No footer - place at end of file.\n                pos = feedback.getContent().length();\n\n            text = fileTagString(file) + text;\n        }\n        insertText(pos, text);\n    }\n\n    private static String fileTagString (String file) {\n        file = \" \" + file + \" \";\n        if (file.length() % 2 != 0)\n            file = file + \" \";\n\n        int sz = (Settings.FILE_DECORATION_WIDTH - file.length()) / 2; // space per side\n        int numRepeats = sz / 2;\n        String extra = sz % 2 == 0 ? \"\" : \"<>\";\n\n        String around = new String(new char[numRepeats]).replace(\"\\0\", \"<>\");\n        String border = new String(new char[80]).replace(\"\\0\", \"=\"); // Width 80\n        return \"\\n\\n\" + border + \"\\n\" + around + file + around + extra + \"\\n\" + border + \"\\n\" + Feedback.getFileTag(file);\n    }\n\n    public void feedbackAt (String file, String content, int caretLine, int caretColumn, int caretPosition) {\n        String text;\n        if (caretLine < 0 && caretColumn < 0)\n            text = \"\\n\";\n        else\n            text = \"\\nAt \" + caretString(caretLine, caretColumn) + \":\\n\";\n\n        int pos = feedback.getFilePosition(file);\n        if (pos < 0) { // No FILE-tag or footer present.\n            pos = feedback.getContent().indexOf(Feedback.FOOTER) - 1; // Place above footer, if it exists.\n            if (pos < 0) // No footer - place at end of file.\n                pos = feedback.getContent().length();\n\n            text = fileTagString(file) + text;\n        }\n        insertText(pos, text + content);\n    }\n\n    public void insertText (int pos, String s) {\n        codeArea.insertText(pos, s);\n    }\n\n    public void insertTextAtCaret (String s) {\n        insertText(codeArea.getCaretPosition(), s);\n    }\n}\n"
    },
    "content": "\n%HEADER%\n\nThis is the body. There are a few tags you should know about:\n\nThe %GROUP% tag simply indicates the name of the group being graded. It is the\nsame as the values shown in the feedback lists.\n\nThe %MANUAL% tag indicates that some part of the template (it may also be\npresent in Pasta) is not to be exported as-is. For example, it may include code\nsnippets that should be altered to fit the current group being graded. This is\nthe ONLY tag which will not be removed when exporting.\n\nThe %FILE: <Filename>% tag is special. It can be used to give feedback\nreferencing an appropriate row and file (and column, if you like). If you did\nnot use the automatic import function (Ctrl+I), files can be dragged-and-dropped\nonto the file view of a group to add it. \n\nAbout files:\n================================================================================\n<><><><><><><><><><><><><><><><> Main.java  <><><><><><><><><><><><><><><><><><>\n================================================================================\n%FILE:  Main.java  % <-- This is a file tag. \n\nThis is what an automatic file section looks like (the width, currently 80, can\nbe changed in the settings). It will be created the the bottom of the document\nif no footer tag is present. The tags are created automatically if they are not\npresent when a file related function is used.\n\n\n================================================================================\n<><><><><><><><><><><><><><><> JavaCodeArea.java  <><><><><><><><><><><><><><><>\n================================================================================\n%FILE:  JavaCodeArea.java  %\nAt L20:  \nWrap long lines; it makes them easier to read.\n\nAt L28, C54:  \nNice regex you got there.\n\n\n================================================================================\n<><><><><><><><><><><><><><><> FeedbackText.java  <><><><><><><><><><><><><><><>\n================================================================================\n%FILE:  FeedbackText.java  %\nAt L117, C46:  \nFound a bug!\n\n%FOOTER%\n",
    "header": "Hello! This is the header.\n\nThis is usally a good place to put information which doesn't change between\nassignments, such as grading policy. I'm gonna use it to tell you about some\nfeatures instead:\n\nImport a template (Feedback -> Import Template), but not quite yet. It will\nreplace what you're readining now.\n\nImport groups from folder structures\n    1. A single root folder is assumed to contain a single root folder per\n       group. Any subfolders of top-level subfolders will begroup property.\n    2. Set file filters (e.g. *.java) to select the types of files to import.\n    3. Click done or close the window. The program will ask you if you want to\n       clear old groups or just import the new ones. Feedback will be created\n       for each group, based on the template.\n\nSick of writing the same thing over and over again?\n    1. Open the Pasta Editor (Ctrl+G) and click \"New Pasta\"\n    2. Create and add tags to organize items by content and by assignment.\n    3. Close the window. The program will ask if you want to use the new pasta.\n\nQuick insert (Pasta) at caret\n    1. Select a Pasta item (the search function is your friend) and select a\n       position in a student file.\n    2. Press (Ctrl+Q) or right-click the pasta list. The pasta will be pasted\n       into the student feedback referencing the current file and position.\n       Some examples are included to let you try this out.\n\nWhen youre done, you can export everything as individual files using (Ctrl+E).\nYou can also double-click (or right click) a group in the list to get a preview.",
    "footer": "\nThis is the footer. This is a good place to include the signature tag.\nSimply including it in the body may cause issues with the automatic\ncreation of file tags. If the file tags are already present, its not an issue.\n\nThank you for using CopyPasta!\n%SIGNATURE%                                    \n\n\n  _______________________________\n /\\                              \\\n/++\\    __________________________\\\n\\+++\\   \\ ************************/\n \\+++\\   \\___________________ ***/\n  \\+++\\   \\             /+++/***/\n   \\+++\\   \\           /+++/***/\n    \\+++\\   \\         /+++/***/\n     \\+++\\   \\       /+++/***/\n      \\+++\\   \\     /+++/***/\n       \\+++\\   \\   /+++/***/\n        \\+++\\   \\ /+++/***/\n         \\+++\\   /+++/***/\n          \\+++\\ /+++/***/\n           \\+++++++/***/\n            \\+++++/***/\n             \\+++/***/\n              \\+/___/",
    "signature": "Richard Sundqvist (richard.sundqvist@live.se)",
    "group": "group_with_some_files",
    "assignment": "",
    "done": false
  },
  {
    "files": {},
    "content": "\n%HEADER%\n\nThis is the body. There are a few tags you should know about:\n\nThe %GROUP% tag simply indicates the name of the group being graded. It is the\nsame as the values shown in the feedback lists.\n\nThe %MANUAL% tag indicates that some part of the template (it may also be\npresent in Pasta) is not to be exported as-is. For example, it may include code\nsnippets that should be altered to fit the current group being graded. This is\nthe ONLY tag which will not be removed when exporting.\n\nThe %FILE: <Filename>% tag is special. It can be used to give feedback\nreferencing an appropriate row and file (and column, if you like). If you did\nnot use the automatic import function (Ctrl+I), files can be dragged-and-dropped\nonto the file view of a group to add it. \n\nAbout files:\n================================================================================\n<><><><><><><><><><><><><><><><> Main.java  <><><><><><><><><><><><><><><><><><>\n================================================================================\n%FILE:  Main.java  % <-- This is a file tag. \n\nThis is what an automatic file section looks like (the width, currently 80, can\nbe changed in the settings). It will be created the the bottom of the document\nif no footer tag is present. The tags are created automatically if they are not\npresent when a file related function is used.\n\n%FOOTER%\n",
    "header": "Hello! This is the header.\n\nThis is usally a good place to put information which doesn't change between\nassignments, such as grading policy. I'm gonna use it to tell you about some\nfeatures instead:\n\nImport a template (Feedback -> Import Template), but not quite yet. It will\nreplace what you're readining now.\n\nImport groups from folder structures\n    1. A single root folder is assumed to contain a single root folder per\n       group. Any subfolders of top-level subfolders will begroup property.\n    2. Set file filters (e.g. java) to select the types of files to import.\n    3. Click done or close the window. The program will ask you if you want to\n       clear old groups or just import the new ones. Feedback will be created\n       for each group, based on the template.\n\nSick of writing the same thing over and over again?\n    1. Open the Pasta Editor (Ctrl+G) and click \"New Pasta\"\n    2. Create and add tags to organize items by content and by assignment.\n    3. Close the window. The program will ask if you want to use the new pasta.\n\nQuick insert (Pasta) at caret\n    1. Select a Pasta item (the search function is your friend) and select a\n       position in a student file.\n    2. Press (Ctrl+Q) or right-click the pasta list. The pasta will be pasted\n       into the student feedback referencing the current file and position.\n       Some examples are included to let you try this out.\n\nWhen youre done, you can export everything as individual files using (Ctrl+E).\nYou can also double-click (or right click) a group in the list to get a preview.",
    "footer": "\nThis is the footer. This is a good place to include the signature tag.\nSimply including it in the body may cause issues with the automatic\ncreation of file tags. If the file tags are already present, its not an issue.\n\nThank you for using CopyPasta!\n%SIGNATURE%                                    \n\n\n  _______________________________\n /\\                              \\\n/++\\    __________________________\\\n\\+++\\   \\ ************************/\n \\+++\\   \\___________________ ***/\n  \\+++\\   \\             /+++/***/\n   \\+++\\   \\           /+++/***/\n    \\+++\\   \\         /+++/***/\n     \\+++\\   \\       /+++/***/\n      \\+++\\   \\     /+++/***/\n       \\+++\\   \\   /+++/***/\n        \\+++\\   \\ /+++/***/\n         \\+++\\   /+++/***/\n          \\+++\\ /+++/***/\n           \\+++++++/***/\n            \\+++++/***/\n             \\+++/***/\n              \\+/___/",
    "signature": "Richard Sundqvist (richard.sundqvist@live.se)",
    "group": "group_with_no_files",
    "assignment": "",
    "done": true
  }
]